// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sp2p_protocol.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "sp2p_protocol.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* ClientMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClientMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* ClientMessage_Register_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClientMessage_Register_reflection_ = NULL;
const ::google::protobuf::Descriptor* ClientMessage_Unregister_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClientMessage_Unregister_reflection_ = NULL;
const ::google::protobuf::Descriptor* ClientMessage_Login_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClientMessage_Login_reflection_ = NULL;
const ::google::protobuf::Descriptor* ClientMessage_Logout_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClientMessage_Logout_reflection_ = NULL;
const ::google::protobuf::Descriptor* ClientMessage_ListNetworks_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClientMessage_ListNetworks_reflection_ = NULL;
const ::google::protobuf::Descriptor* ClientMessage_ListMyNetworks_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClientMessage_ListMyNetworks_reflection_ = NULL;
const ::google::protobuf::Descriptor* ClientMessage_ListServers_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClientMessage_ListServers_reflection_ = NULL;
const ::google::protobuf::Descriptor* ClientMessage_CreateNetwork_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClientMessage_CreateNetwork_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ClientMessage_CreateNetwork_AccessRights_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ClientMessage_CreateNetwork_Visiblity_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ClientMessage_CreateNetwork_ParticipationRights_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ClientMessage_DeleteNetwork_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClientMessage_DeleteNetwork_reflection_ = NULL;
const ::google::protobuf::Descriptor* ClientMessage_InviteUser_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClientMessage_InviteUser_reflection_ = NULL;
const ::google::protobuf::Descriptor* ClientMessage_RemoveUser_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClientMessage_RemoveUser_reflection_ = NULL;
const ::google::protobuf::Descriptor* ClientMessage_UserInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClientMessage_UserInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ClientMessage_UpdateServer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClientMessage_UpdateServer_reflection_ = NULL;
const ::google::protobuf::Descriptor* ClientMessage_StopServer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClientMessage_StopServer_reflection_ = NULL;
const ::google::protobuf::Descriptor* ClientMessage_SignKey_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClientMessage_SignKey_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ClientMessage_RequestType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* NodeMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NodeMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* NodeMessage_Register_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NodeMessage_Register_reflection_ = NULL;
const ::google::protobuf::Descriptor* NodeMessage_Login_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NodeMessage_Login_reflection_ = NULL;
const ::google::protobuf::Descriptor* NodeMessage_ListNetworks_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NodeMessage_ListNetworks_reflection_ = NULL;
const ::google::protobuf::Descriptor* NodeMessage_ListNetworks_Network_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NodeMessage_ListNetworks_Network_reflection_ = NULL;
const ::google::protobuf::Descriptor* NodeMessage_ListMyNetworks_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NodeMessage_ListMyNetworks_reflection_ = NULL;
const ::google::protobuf::Descriptor* NodeMessage_ListServers_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NodeMessage_ListServers_reflection_ = NULL;
const ::google::protobuf::Descriptor* NodeMessage_ListServers_Server_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NodeMessage_ListServers_Server_reflection_ = NULL;
const ::google::protobuf::Descriptor* NodeMessage_UserInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NodeMessage_UserInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* NodeMessage_UpdateServer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NodeMessage_UpdateServer_reflection_ = NULL;
const ::google::protobuf::Descriptor* NodeMessage_SignKey_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NodeMessage_SignKey_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* NodeMessage_ResponseType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_sp2p_5fprotocol_2eproto() {
  protobuf_AddDesc_sp2p_5fprotocol_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "sp2p_protocol.proto");
  GOOGLE_CHECK(file != NULL);
  ClientMessage_descriptor_ = file->message_type(0);
  static const int ClientMessage_offsets_[16] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientMessage, request_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientMessage, register_message_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientMessage, unregister_message_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientMessage, login_message_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientMessage, logout_message_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientMessage, list_networks_message_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientMessage, list_my_networks_message_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientMessage, list_servers_message_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientMessage, create_network_message_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientMessage, delete_network_message_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientMessage, invite_user_message_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientMessage, remove_user_message_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientMessage, user_info_message_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientMessage, update_server_message_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientMessage, stop_server_message_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientMessage, sign_key_message_),
  };
  ClientMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ClientMessage_descriptor_,
      ClientMessage::default_instance_,
      ClientMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ClientMessage));
  ClientMessage_Register_descriptor_ = ClientMessage_descriptor_->nested_type(0);
  static const int ClientMessage_Register_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientMessage_Register, username_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientMessage_Register, password_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientMessage_Register, public_key_),
  };
  ClientMessage_Register_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ClientMessage_Register_descriptor_,
      ClientMessage_Register::default_instance_,
      ClientMessage_Register_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientMessage_Register, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientMessage_Register, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ClientMessage_Register));
  ClientMessage_Unregister_descriptor_ = ClientMessage_descriptor_->nested_type(1);
  static const int ClientMessage_Unregister_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientMessage_Unregister, cookie_),
  };
  ClientMessage_Unregister_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ClientMessage_Unregister_descriptor_,
      ClientMessage_Unregister::default_instance_,
      ClientMessage_Unregister_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientMessage_Unregister, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientMessage_Unregister, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ClientMessage_Unregister));
  ClientMessage_Login_descriptor_ = ClientMessage_descriptor_->nested_type(2);
  static const int ClientMessage_Login_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientMessage_Login, username_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientMessage_Login, password_),
  };
  ClientMessage_Login_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ClientMessage_Login_descriptor_,
      ClientMessage_Login::default_instance_,
      ClientMessage_Login_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientMessage_Login, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientMessage_Login, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ClientMessage_Login));
  ClientMessage_Logout_descriptor_ = ClientMessage_descriptor_->nested_type(3);
  static const int ClientMessage_Logout_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientMessage_Logout, cookie_),
  };
  ClientMessage_Logout_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ClientMessage_Logout_descriptor_,
      ClientMessage_Logout::default_instance_,
      ClientMessage_Logout_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientMessage_Logout, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientMessage_Logout, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ClientMessage_Logout));
  ClientMessage_ListNetworks_descriptor_ = ClientMessage_descriptor_->nested_type(4);
  static const int ClientMessage_ListNetworks_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientMessage_ListNetworks, cookie_),
  };
  ClientMessage_ListNetworks_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ClientMessage_ListNetworks_descriptor_,
      ClientMessage_ListNetworks::default_instance_,
      ClientMessage_ListNetworks_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientMessage_ListNetworks, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientMessage_ListNetworks, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ClientMessage_ListNetworks));
  ClientMessage_ListMyNetworks_descriptor_ = ClientMessage_descriptor_->nested_type(5);
  static const int ClientMessage_ListMyNetworks_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientMessage_ListMyNetworks, cookie_),
  };
  ClientMessage_ListMyNetworks_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ClientMessage_ListMyNetworks_descriptor_,
      ClientMessage_ListMyNetworks::default_instance_,
      ClientMessage_ListMyNetworks_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientMessage_ListMyNetworks, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientMessage_ListMyNetworks, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ClientMessage_ListMyNetworks));
  ClientMessage_ListServers_descriptor_ = ClientMessage_descriptor_->nested_type(6);
  static const int ClientMessage_ListServers_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientMessage_ListServers, cookie_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientMessage_ListServers, network_name_),
  };
  ClientMessage_ListServers_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ClientMessage_ListServers_descriptor_,
      ClientMessage_ListServers::default_instance_,
      ClientMessage_ListServers_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientMessage_ListServers, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientMessage_ListServers, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ClientMessage_ListServers));
  ClientMessage_CreateNetwork_descriptor_ = ClientMessage_descriptor_->nested_type(7);
  static const int ClientMessage_CreateNetwork_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientMessage_CreateNetwork, cookie_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientMessage_CreateNetwork, network_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientMessage_CreateNetwork, access_rights_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientMessage_CreateNetwork, visibility_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientMessage_CreateNetwork, participation_rights_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientMessage_CreateNetwork, creator_email_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientMessage_CreateNetwork, protocol_name_),
  };
  ClientMessage_CreateNetwork_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ClientMessage_CreateNetwork_descriptor_,
      ClientMessage_CreateNetwork::default_instance_,
      ClientMessage_CreateNetwork_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientMessage_CreateNetwork, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientMessage_CreateNetwork, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ClientMessage_CreateNetwork));
  ClientMessage_CreateNetwork_AccessRights_descriptor_ = ClientMessage_CreateNetwork_descriptor_->enum_type(0);
  ClientMessage_CreateNetwork_Visiblity_descriptor_ = ClientMessage_CreateNetwork_descriptor_->enum_type(1);
  ClientMessage_CreateNetwork_ParticipationRights_descriptor_ = ClientMessage_CreateNetwork_descriptor_->enum_type(2);
  ClientMessage_DeleteNetwork_descriptor_ = ClientMessage_descriptor_->nested_type(8);
  static const int ClientMessage_DeleteNetwork_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientMessage_DeleteNetwork, cookie_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientMessage_DeleteNetwork, name_),
  };
  ClientMessage_DeleteNetwork_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ClientMessage_DeleteNetwork_descriptor_,
      ClientMessage_DeleteNetwork::default_instance_,
      ClientMessage_DeleteNetwork_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientMessage_DeleteNetwork, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientMessage_DeleteNetwork, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ClientMessage_DeleteNetwork));
  ClientMessage_InviteUser_descriptor_ = ClientMessage_descriptor_->nested_type(9);
  static const int ClientMessage_InviteUser_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientMessage_InviteUser, cookie_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientMessage_InviteUser, username_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientMessage_InviteUser, network_name_),
  };
  ClientMessage_InviteUser_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ClientMessage_InviteUser_descriptor_,
      ClientMessage_InviteUser::default_instance_,
      ClientMessage_InviteUser_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientMessage_InviteUser, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientMessage_InviteUser, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ClientMessage_InviteUser));
  ClientMessage_RemoveUser_descriptor_ = ClientMessage_descriptor_->nested_type(10);
  static const int ClientMessage_RemoveUser_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientMessage_RemoveUser, cookie_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientMessage_RemoveUser, username_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientMessage_RemoveUser, network_name_),
  };
  ClientMessage_RemoveUser_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ClientMessage_RemoveUser_descriptor_,
      ClientMessage_RemoveUser::default_instance_,
      ClientMessage_RemoveUser_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientMessage_RemoveUser, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientMessage_RemoveUser, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ClientMessage_RemoveUser));
  ClientMessage_UserInfo_descriptor_ = ClientMessage_descriptor_->nested_type(11);
  static const int ClientMessage_UserInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientMessage_UserInfo, cookie_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientMessage_UserInfo, username_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientMessage_UserInfo, network_name_),
  };
  ClientMessage_UserInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ClientMessage_UserInfo_descriptor_,
      ClientMessage_UserInfo::default_instance_,
      ClientMessage_UserInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientMessage_UserInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientMessage_UserInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ClientMessage_UserInfo));
  ClientMessage_UpdateServer_descriptor_ = ClientMessage_descriptor_->nested_type(12);
  static const int ClientMessage_UpdateServer_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientMessage_UpdateServer, cookie_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientMessage_UpdateServer, network_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientMessage_UpdateServer, port_number_),
  };
  ClientMessage_UpdateServer_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ClientMessage_UpdateServer_descriptor_,
      ClientMessage_UpdateServer::default_instance_,
      ClientMessage_UpdateServer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientMessage_UpdateServer, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientMessage_UpdateServer, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ClientMessage_UpdateServer));
  ClientMessage_StopServer_descriptor_ = ClientMessage_descriptor_->nested_type(13);
  static const int ClientMessage_StopServer_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientMessage_StopServer, cookie_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientMessage_StopServer, network_name_),
  };
  ClientMessage_StopServer_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ClientMessage_StopServer_descriptor_,
      ClientMessage_StopServer::default_instance_,
      ClientMessage_StopServer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientMessage_StopServer, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientMessage_StopServer, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ClientMessage_StopServer));
  ClientMessage_SignKey_descriptor_ = ClientMessage_descriptor_->nested_type(14);
  static const int ClientMessage_SignKey_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientMessage_SignKey, cookie_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientMessage_SignKey, public_key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientMessage_SignKey, network_name_),
  };
  ClientMessage_SignKey_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ClientMessage_SignKey_descriptor_,
      ClientMessage_SignKey::default_instance_,
      ClientMessage_SignKey_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientMessage_SignKey, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientMessage_SignKey, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ClientMessage_SignKey));
  ClientMessage_RequestType_descriptor_ = ClientMessage_descriptor_->enum_type(0);
  NodeMessage_descriptor_ = file->message_type(1);
  static const int NodeMessage_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeMessage, response_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeMessage, register_response_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeMessage, login_response_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeMessage, list_networks_response_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeMessage, list_my_networks_response_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeMessage, list_servers_response_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeMessage, user_info_response_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeMessage, update_server_response_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeMessage, sign_key_response_),
  };
  NodeMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NodeMessage_descriptor_,
      NodeMessage::default_instance_,
      NodeMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NodeMessage));
  NodeMessage_Register_descriptor_ = NodeMessage_descriptor_->nested_type(0);
  static const int NodeMessage_Register_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeMessage_Register, user_certificate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeMessage_Register, node_certificate_),
  };
  NodeMessage_Register_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NodeMessage_Register_descriptor_,
      NodeMessage_Register::default_instance_,
      NodeMessage_Register_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeMessage_Register, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeMessage_Register, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NodeMessage_Register));
  NodeMessage_Login_descriptor_ = NodeMessage_descriptor_->nested_type(1);
  static const int NodeMessage_Login_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeMessage_Login, cookie_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeMessage_Login, node_certificate_),
  };
  NodeMessage_Login_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NodeMessage_Login_descriptor_,
      NodeMessage_Login::default_instance_,
      NodeMessage_Login_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeMessage_Login, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeMessage_Login, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NodeMessage_Login));
  NodeMessage_ListNetworks_descriptor_ = NodeMessage_descriptor_->nested_type(2);
  static const int NodeMessage_ListNetworks_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeMessage_ListNetworks, network_list_),
  };
  NodeMessage_ListNetworks_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NodeMessage_ListNetworks_descriptor_,
      NodeMessage_ListNetworks::default_instance_,
      NodeMessage_ListNetworks_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeMessage_ListNetworks, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeMessage_ListNetworks, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NodeMessage_ListNetworks));
  NodeMessage_ListNetworks_Network_descriptor_ = NodeMessage_ListNetworks_descriptor_->nested_type(0);
  static const int NodeMessage_ListNetworks_Network_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeMessage_ListNetworks_Network, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeMessage_ListNetworks_Network, creator_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeMessage_ListNetworks_Network, creator_email_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeMessage_ListNetworks_Network, access_rights_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeMessage_ListNetworks_Network, participation_rights_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeMessage_ListNetworks_Network, protocol_name_),
  };
  NodeMessage_ListNetworks_Network_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NodeMessage_ListNetworks_Network_descriptor_,
      NodeMessage_ListNetworks_Network::default_instance_,
      NodeMessage_ListNetworks_Network_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeMessage_ListNetworks_Network, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeMessage_ListNetworks_Network, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NodeMessage_ListNetworks_Network));
  NodeMessage_ListMyNetworks_descriptor_ = NodeMessage_descriptor_->nested_type(3);
  static const int NodeMessage_ListMyNetworks_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeMessage_ListMyNetworks, network_list_),
  };
  NodeMessage_ListMyNetworks_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NodeMessage_ListMyNetworks_descriptor_,
      NodeMessage_ListMyNetworks::default_instance_,
      NodeMessage_ListMyNetworks_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeMessage_ListMyNetworks, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeMessage_ListMyNetworks, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NodeMessage_ListMyNetworks));
  NodeMessage_ListServers_descriptor_ = NodeMessage_descriptor_->nested_type(4);
  static const int NodeMessage_ListServers_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeMessage_ListServers, list_servers_),
  };
  NodeMessage_ListServers_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NodeMessage_ListServers_descriptor_,
      NodeMessage_ListServers::default_instance_,
      NodeMessage_ListServers_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeMessage_ListServers, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeMessage_ListServers, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NodeMessage_ListServers));
  NodeMessage_ListServers_Server_descriptor_ = NodeMessage_ListServers_descriptor_->nested_type(0);
  static const int NodeMessage_ListServers_Server_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeMessage_ListServers_Server, username_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeMessage_ListServers_Server, ip_address_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeMessage_ListServers_Server, port_number_),
  };
  NodeMessage_ListServers_Server_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NodeMessage_ListServers_Server_descriptor_,
      NodeMessage_ListServers_Server::default_instance_,
      NodeMessage_ListServers_Server_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeMessage_ListServers_Server, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeMessage_ListServers_Server, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NodeMessage_ListServers_Server));
  NodeMessage_UserInfo_descriptor_ = NodeMessage_descriptor_->nested_type(5);
  static const int NodeMessage_UserInfo_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeMessage_UserInfo, user_public_key_),
  };
  NodeMessage_UserInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NodeMessage_UserInfo_descriptor_,
      NodeMessage_UserInfo::default_instance_,
      NodeMessage_UserInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeMessage_UserInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeMessage_UserInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NodeMessage_UserInfo));
  NodeMessage_UpdateServer_descriptor_ = NodeMessage_descriptor_->nested_type(6);
  static const int NodeMessage_UpdateServer_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeMessage_UpdateServer, seconds_to_update_),
  };
  NodeMessage_UpdateServer_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NodeMessage_UpdateServer_descriptor_,
      NodeMessage_UpdateServer::default_instance_,
      NodeMessage_UpdateServer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeMessage_UpdateServer, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeMessage_UpdateServer, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NodeMessage_UpdateServer));
  NodeMessage_SignKey_descriptor_ = NodeMessage_descriptor_->nested_type(7);
  static const int NodeMessage_SignKey_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeMessage_SignKey, user_certificate_),
  };
  NodeMessage_SignKey_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NodeMessage_SignKey_descriptor_,
      NodeMessage_SignKey::default_instance_,
      NodeMessage_SignKey_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeMessage_SignKey, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeMessage_SignKey, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NodeMessage_SignKey));
  NodeMessage_ResponseType_descriptor_ = NodeMessage_descriptor_->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_sp2p_5fprotocol_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ClientMessage_descriptor_, &ClientMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ClientMessage_Register_descriptor_, &ClientMessage_Register::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ClientMessage_Unregister_descriptor_, &ClientMessage_Unregister::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ClientMessage_Login_descriptor_, &ClientMessage_Login::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ClientMessage_Logout_descriptor_, &ClientMessage_Logout::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ClientMessage_ListNetworks_descriptor_, &ClientMessage_ListNetworks::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ClientMessage_ListMyNetworks_descriptor_, &ClientMessage_ListMyNetworks::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ClientMessage_ListServers_descriptor_, &ClientMessage_ListServers::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ClientMessage_CreateNetwork_descriptor_, &ClientMessage_CreateNetwork::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ClientMessage_DeleteNetwork_descriptor_, &ClientMessage_DeleteNetwork::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ClientMessage_InviteUser_descriptor_, &ClientMessage_InviteUser::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ClientMessage_RemoveUser_descriptor_, &ClientMessage_RemoveUser::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ClientMessage_UserInfo_descriptor_, &ClientMessage_UserInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ClientMessage_UpdateServer_descriptor_, &ClientMessage_UpdateServer::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ClientMessage_StopServer_descriptor_, &ClientMessage_StopServer::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ClientMessage_SignKey_descriptor_, &ClientMessage_SignKey::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NodeMessage_descriptor_, &NodeMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NodeMessage_Register_descriptor_, &NodeMessage_Register::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NodeMessage_Login_descriptor_, &NodeMessage_Login::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NodeMessage_ListNetworks_descriptor_, &NodeMessage_ListNetworks::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NodeMessage_ListNetworks_Network_descriptor_, &NodeMessage_ListNetworks_Network::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NodeMessage_ListMyNetworks_descriptor_, &NodeMessage_ListMyNetworks::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NodeMessage_ListServers_descriptor_, &NodeMessage_ListServers::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NodeMessage_ListServers_Server_descriptor_, &NodeMessage_ListServers_Server::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NodeMessage_UserInfo_descriptor_, &NodeMessage_UserInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NodeMessage_UpdateServer_descriptor_, &NodeMessage_UpdateServer::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NodeMessage_SignKey_descriptor_, &NodeMessage_SignKey::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_sp2p_5fprotocol_2eproto() {
  delete ClientMessage::default_instance_;
  delete ClientMessage_reflection_;
  delete ClientMessage_Register::default_instance_;
  delete ClientMessage_Register_reflection_;
  delete ClientMessage_Unregister::default_instance_;
  delete ClientMessage_Unregister_reflection_;
  delete ClientMessage_Login::default_instance_;
  delete ClientMessage_Login_reflection_;
  delete ClientMessage_Logout::default_instance_;
  delete ClientMessage_Logout_reflection_;
  delete ClientMessage_ListNetworks::default_instance_;
  delete ClientMessage_ListNetworks_reflection_;
  delete ClientMessage_ListMyNetworks::default_instance_;
  delete ClientMessage_ListMyNetworks_reflection_;
  delete ClientMessage_ListServers::default_instance_;
  delete ClientMessage_ListServers_reflection_;
  delete ClientMessage_CreateNetwork::default_instance_;
  delete ClientMessage_CreateNetwork_reflection_;
  delete ClientMessage_DeleteNetwork::default_instance_;
  delete ClientMessage_DeleteNetwork_reflection_;
  delete ClientMessage_InviteUser::default_instance_;
  delete ClientMessage_InviteUser_reflection_;
  delete ClientMessage_RemoveUser::default_instance_;
  delete ClientMessage_RemoveUser_reflection_;
  delete ClientMessage_UserInfo::default_instance_;
  delete ClientMessage_UserInfo_reflection_;
  delete ClientMessage_UpdateServer::default_instance_;
  delete ClientMessage_UpdateServer_reflection_;
  delete ClientMessage_StopServer::default_instance_;
  delete ClientMessage_StopServer_reflection_;
  delete ClientMessage_SignKey::default_instance_;
  delete ClientMessage_SignKey_reflection_;
  delete NodeMessage::default_instance_;
  delete NodeMessage_reflection_;
  delete NodeMessage_Register::default_instance_;
  delete NodeMessage_Register_reflection_;
  delete NodeMessage_Login::default_instance_;
  delete NodeMessage_Login_reflection_;
  delete NodeMessage_ListNetworks::default_instance_;
  delete NodeMessage_ListNetworks_reflection_;
  delete NodeMessage_ListNetworks_Network::default_instance_;
  delete NodeMessage_ListNetworks_Network_reflection_;
  delete NodeMessage_ListMyNetworks::default_instance_;
  delete NodeMessage_ListMyNetworks_reflection_;
  delete NodeMessage_ListServers::default_instance_;
  delete NodeMessage_ListServers_reflection_;
  delete NodeMessage_ListServers_Server::default_instance_;
  delete NodeMessage_ListServers_Server_reflection_;
  delete NodeMessage_UserInfo::default_instance_;
  delete NodeMessage_UserInfo_reflection_;
  delete NodeMessage_UpdateServer::default_instance_;
  delete NodeMessage_UpdateServer_reflection_;
  delete NodeMessage_SignKey::default_instance_;
  delete NodeMessage_SignKey_reflection_;
}

void protobuf_AddDesc_sp2p_5fprotocol_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\023sp2p_protocol.proto\"\254\022\n\rClientMessage\022"
    "+\n\007request\030\001 \002(\0162\032.ClientMessage.Request"
    "Type\0221\n\020register_message\030\002 \001(\0132\027.ClientM"
    "essage.Register\0225\n\022unregister_message\030\003 "
    "\001(\0132\031.ClientMessage.Unregister\022+\n\rlogin_"
    "message\030\004 \001(\0132\024.ClientMessage.Login\022-\n\016l"
    "ogout_message\030\005 \001(\0132\025.ClientMessage.Logo"
    "ut\022:\n\025list_networks_message\030\006 \001(\0132\033.Clie"
    "ntMessage.ListNetworks\022\?\n\030list_my_networ"
    "ks_message\030\007 \001(\0132\035.ClientMessage.ListMyN"
    "etworks\0228\n\024list_servers_message\030\010 \001(\0132\032."
    "ClientMessage.ListServers\022<\n\026create_netw"
    "ork_message\030\t \001(\0132\034.ClientMessage.Create"
    "Network\022<\n\026delete_network_message\030\n \001(\0132"
    "\034.ClientMessage.DeleteNetwork\0226\n\023invite_"
    "user_message\030\013 \001(\0132\031.ClientMessage.Invit"
    "eUser\0226\n\023remove_user_message\030\014 \001(\0132\031.Cli"
    "entMessage.RemoveUser\0222\n\021user_info_messa"
    "ge\030\r \001(\0132\027.ClientMessage.UserInfo\022:\n\025upd"
    "ate_server_message\030\016 \001(\0132\033.ClientMessage"
    ".UpdateServer\0226\n\023stop_server_message\030\017 \001"
    "(\0132\031.ClientMessage.StopServer\0220\n\020sign_ke"
    "y_message\030\020 \001(\0132\026.ClientMessage.SignKey\032"
    "B\n\010Register\022\020\n\010username\030\001 \002(\t\022\020\n\010passwor"
    "d\030\002 \002(\t\022\022\n\npublic_key\030\003 \002(\t\032\034\n\nUnregiste"
    "r\022\016\n\006cookie\030\001 \002(\t\032+\n\005Login\022\020\n\010username\030\001"
    " \002(\t\022\020\n\010password\030\002 \002(\t\032\030\n\006Logout\022\016\n\006cook"
    "ie\030\001 \002(\t\032\036\n\014ListNetworks\022\016\n\006cookie\030\001 \002(\t"
    "\032 \n\016ListMyNetworks\022\016\n\006cookie\030\001 \002(\t\0323\n\013Li"
    "stServers\022\016\n\006cookie\030\001 \002(\t\022\024\n\014network_nam"
    "e\030\002 \002(\t\032\274\003\n\rCreateNetwork\022\016\n\006cookie\030\001 \002("
    "\t\022\024\n\014network_name\030\002 \002(\t\022@\n\raccess_rights"
    "\030\003 \002(\0162).ClientMessage.CreateNetwork.Acc"
    "essRights\022:\n\nvisibility\030\004 \002(\0162&.ClientMe"
    "ssage.CreateNetwork.Visiblity\022N\n\024partici"
    "pation_rights\030\005 \002(\01620.ClientMessage.Crea"
    "teNetwork.ParticipationRights\022\025\n\rcreator"
    "_email\030\006 \001(\t\022\025\n\rprotocol_name\030\007 \001(\t\"\'\n\014A"
    "ccessRights\022\n\n\006PUBLIC\020\001\022\013\n\007PRIVATE\020\002\"%\n\t"
    "Visiblity\022\n\n\006LISTED\020\003\022\014\n\010UNLISTED\020\004\"9\n\023P"
    "articipationRights\022\017\n\013CLIENT_ONLY\020\005\022\021\n\rC"
    "LIENT_SERVER\020\006\032-\n\rDeleteNetwork\022\016\n\006cooki"
    "e\030\001 \002(\t\022\014\n\004name\030\002 \002(\t\032D\n\nInviteUser\022\016\n\006c"
    "ookie\030\001 \002(\t\022\020\n\010username\030\002 \002(\t\022\024\n\014network"
    "_name\030\003 \002(\t\032D\n\nRemoveUser\022\016\n\006cookie\030\001 \002("
    "\t\022\020\n\010username\030\002 \002(\t\022\024\n\014network_name\030\003 \002("
    "\t\032B\n\010UserInfo\022\016\n\006cookie\030\001 \002(\t\022\020\n\010usernam"
    "e\030\002 \002(\t\022\024\n\014network_name\030\003 \002(\t\032I\n\014UpdateS"
    "erver\022\016\n\006cookie\030\001 \002(\t\022\024\n\014network_name\030\002 "
    "\002(\t\022\023\n\013port_number\030\003 \002(\005\0322\n\nStopServer\022\016"
    "\n\006cookie\030\001 \002(\t\022\024\n\014network_name\030\002 \002(\t\032C\n\007"
    "SignKey\022\016\n\006cookie\030\001 \002(\t\022\022\n\npublic_key\030\002 "
    "\002(\t\022\024\n\014network_name\030\003 \001(\t\"\210\002\n\013RequestTyp"
    "e\022\014\n\010REGISTER\020\000\022\016\n\nUNREGISTER\020\001\022\t\n\005LOGIN"
    "\020\002\022\n\n\006LOGOUT\020\003\022\021\n\rLIST_NETWORKS\020\004\022\024\n\020LIS"
    "T_MY_NETWORKS\020\005\022\020\n\014LIST_SERVERS\020\006\022\022\n\016CRE"
    "ATE_NETWORK\020\007\022\022\n\016DELETE_NETWORK\020\010\022\017\n\013INV"
    "ITE_USER\020\t\022\017\n\013REMOVE_USER\020\n\022\r\n\tUSER_INFO"
    "\020\013\022\021\n\rUPDATE_SERVER\020\014\022\017\n\013STOP_SERVER\020\r\022\014"
    "\n\010SIGN_KEY\020\016\"\235\013\n\013NodeMessage\0220\n\rresponse"
    "_type\030\001 \002(\0162\031.NodeMessage.ResponseType\0220"
    "\n\021register_response\030\002 \001(\0132\025.NodeMessage."
    "Register\022*\n\016login_response\030\003 \001(\0132\022.NodeM"
    "essage.Login\0229\n\026list_networks_response\030\005"
    " \001(\0132\031.NodeMessage.ListNetworks\022>\n\031list_"
    "my_networks_response\030\006 \001(\0132\033.NodeMessage"
    ".ListMyNetworks\0227\n\025list_servers_response"
    "\030\007 \001(\0132\030.NodeMessage.ListServers\0221\n\022user"
    "_info_response\030\r \001(\0132\025.NodeMessage.UserI"
    "nfo\0229\n\026update_server_response\030\016 \001(\0132\031.No"
    "deMessage.UpdateServer\022/\n\021sign_key_respo"
    "nse\030\020 \001(\0132\024.NodeMessage.SignKey\032>\n\010Regis"
    "ter\022\030\n\020user_certificate\030\001 \002(\t\022\030\n\020node_ce"
    "rtificate\030\002 \002(\t\0321\n\005Login\022\016\n\006cookie\030\001 \002(\t"
    "\022\030\n\020node_certificate\030\002 \001(\t\032\267\002\n\014ListNetwo"
    "rks\0227\n\014network_list\030\001 \003(\0132!.NodeMessage."
    "ListNetworks.Network\032\355\001\n\007Network\022\014\n\004name"
    "\030\001 \002(\t\022\024\n\014creator_name\030\002 \002(\t\022\025\n\rcreator_"
    "email\030\003 \001(\t\022@\n\raccess_rights\030\004 \002(\0162).Cli"
    "entMessage.CreateNetwork.AccessRights\022N\n"
    "\024participation_rights\030\005 \002(\01620.ClientMess"
    "age.CreateNetwork.ParticipationRights\022\025\n"
    "\rprotocol_name\030\006 \001(\t\032I\n\016ListMyNetworks\0227"
    "\n\014network_list\030\001 \003(\0132!.NodeMessage.ListN"
    "etworks.Network\032\202\001\n\013ListServers\022.\n\014list_"
    "servers\030\001 \003(\0132\030.NodeMessage.ListServers\032"
    "C\n\006Server\022\020\n\010username\030\001 \002(\t\022\022\n\nip_addres"
    "s\030\002 \002(\t\022\023\n\013port_number\030\003 \002(\005\032#\n\010UserInfo"
    "\022\027\n\017user_public_key\030\001 \002(\t\032)\n\014UpdateServe"
    "r\022\031\n\021seconds_to_update\030\001 \002(\005\032#\n\007SignKey\022"
    "\030\n\020user_certificate\030\001 \002(\t\"\270\001\n\014ResponseTy"
    "pe\022\007\n\002OK\020\310\001\022\032\n\025INTERNAL_SERVER_ERROR\020\220\003\022"
    "\020\n\013BAD_REQUEST\020\364\003\022\022\n\rNO_PRIVILAGES\020\365\003\022\017\n"
    "\nNOT_LOGGED\020\366\003\022\024\n\017BAD_CREDENTIALS\020\367\003\022\021\n\014"
    "NO_SUCH_USER\020\370\003\022\024\n\017NO_SUCH_NETWORK\020\371\003\022\r\n"
    "\010BAD_DATA\020\372\003", 3812);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "sp2p_protocol.proto", &protobuf_RegisterTypes);
  ClientMessage::default_instance_ = new ClientMessage();
  ClientMessage_Register::default_instance_ = new ClientMessage_Register();
  ClientMessage_Unregister::default_instance_ = new ClientMessage_Unregister();
  ClientMessage_Login::default_instance_ = new ClientMessage_Login();
  ClientMessage_Logout::default_instance_ = new ClientMessage_Logout();
  ClientMessage_ListNetworks::default_instance_ = new ClientMessage_ListNetworks();
  ClientMessage_ListMyNetworks::default_instance_ = new ClientMessage_ListMyNetworks();
  ClientMessage_ListServers::default_instance_ = new ClientMessage_ListServers();
  ClientMessage_CreateNetwork::default_instance_ = new ClientMessage_CreateNetwork();
  ClientMessage_DeleteNetwork::default_instance_ = new ClientMessage_DeleteNetwork();
  ClientMessage_InviteUser::default_instance_ = new ClientMessage_InviteUser();
  ClientMessage_RemoveUser::default_instance_ = new ClientMessage_RemoveUser();
  ClientMessage_UserInfo::default_instance_ = new ClientMessage_UserInfo();
  ClientMessage_UpdateServer::default_instance_ = new ClientMessage_UpdateServer();
  ClientMessage_StopServer::default_instance_ = new ClientMessage_StopServer();
  ClientMessage_SignKey::default_instance_ = new ClientMessage_SignKey();
  NodeMessage::default_instance_ = new NodeMessage();
  NodeMessage_Register::default_instance_ = new NodeMessage_Register();
  NodeMessage_Login::default_instance_ = new NodeMessage_Login();
  NodeMessage_ListNetworks::default_instance_ = new NodeMessage_ListNetworks();
  NodeMessage_ListNetworks_Network::default_instance_ = new NodeMessage_ListNetworks_Network();
  NodeMessage_ListMyNetworks::default_instance_ = new NodeMessage_ListMyNetworks();
  NodeMessage_ListServers::default_instance_ = new NodeMessage_ListServers();
  NodeMessage_ListServers_Server::default_instance_ = new NodeMessage_ListServers_Server();
  NodeMessage_UserInfo::default_instance_ = new NodeMessage_UserInfo();
  NodeMessage_UpdateServer::default_instance_ = new NodeMessage_UpdateServer();
  NodeMessage_SignKey::default_instance_ = new NodeMessage_SignKey();
  ClientMessage::default_instance_->InitAsDefaultInstance();
  ClientMessage_Register::default_instance_->InitAsDefaultInstance();
  ClientMessage_Unregister::default_instance_->InitAsDefaultInstance();
  ClientMessage_Login::default_instance_->InitAsDefaultInstance();
  ClientMessage_Logout::default_instance_->InitAsDefaultInstance();
  ClientMessage_ListNetworks::default_instance_->InitAsDefaultInstance();
  ClientMessage_ListMyNetworks::default_instance_->InitAsDefaultInstance();
  ClientMessage_ListServers::default_instance_->InitAsDefaultInstance();
  ClientMessage_CreateNetwork::default_instance_->InitAsDefaultInstance();
  ClientMessage_DeleteNetwork::default_instance_->InitAsDefaultInstance();
  ClientMessage_InviteUser::default_instance_->InitAsDefaultInstance();
  ClientMessage_RemoveUser::default_instance_->InitAsDefaultInstance();
  ClientMessage_UserInfo::default_instance_->InitAsDefaultInstance();
  ClientMessage_UpdateServer::default_instance_->InitAsDefaultInstance();
  ClientMessage_StopServer::default_instance_->InitAsDefaultInstance();
  ClientMessage_SignKey::default_instance_->InitAsDefaultInstance();
  NodeMessage::default_instance_->InitAsDefaultInstance();
  NodeMessage_Register::default_instance_->InitAsDefaultInstance();
  NodeMessage_Login::default_instance_->InitAsDefaultInstance();
  NodeMessage_ListNetworks::default_instance_->InitAsDefaultInstance();
  NodeMessage_ListNetworks_Network::default_instance_->InitAsDefaultInstance();
  NodeMessage_ListMyNetworks::default_instance_->InitAsDefaultInstance();
  NodeMessage_ListServers::default_instance_->InitAsDefaultInstance();
  NodeMessage_ListServers_Server::default_instance_->InitAsDefaultInstance();
  NodeMessage_UserInfo::default_instance_->InitAsDefaultInstance();
  NodeMessage_UpdateServer::default_instance_->InitAsDefaultInstance();
  NodeMessage_SignKey::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_sp2p_5fprotocol_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_sp2p_5fprotocol_2eproto {
  StaticDescriptorInitializer_sp2p_5fprotocol_2eproto() {
    protobuf_AddDesc_sp2p_5fprotocol_2eproto();
  }
} static_descriptor_initializer_sp2p_5fprotocol_2eproto_;

// ===================================================================

const ::google::protobuf::EnumDescriptor* ClientMessage_RequestType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClientMessage_RequestType_descriptor_;
}
bool ClientMessage_RequestType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ClientMessage_RequestType ClientMessage::REGISTER;
const ClientMessage_RequestType ClientMessage::UNREGISTER;
const ClientMessage_RequestType ClientMessage::LOGIN;
const ClientMessage_RequestType ClientMessage::LOGOUT;
const ClientMessage_RequestType ClientMessage::LIST_NETWORKS;
const ClientMessage_RequestType ClientMessage::LIST_MY_NETWORKS;
const ClientMessage_RequestType ClientMessage::LIST_SERVERS;
const ClientMessage_RequestType ClientMessage::CREATE_NETWORK;
const ClientMessage_RequestType ClientMessage::DELETE_NETWORK;
const ClientMessage_RequestType ClientMessage::INVITE_USER;
const ClientMessage_RequestType ClientMessage::REMOVE_USER;
const ClientMessage_RequestType ClientMessage::USER_INFO;
const ClientMessage_RequestType ClientMessage::UPDATE_SERVER;
const ClientMessage_RequestType ClientMessage::STOP_SERVER;
const ClientMessage_RequestType ClientMessage::SIGN_KEY;
const ClientMessage_RequestType ClientMessage::RequestType_MIN;
const ClientMessage_RequestType ClientMessage::RequestType_MAX;
const int ClientMessage::RequestType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ClientMessage_Register::kUsernameFieldNumber;
const int ClientMessage_Register::kPasswordFieldNumber;
const int ClientMessage_Register::kPublicKeyFieldNumber;
#endif  // !_MSC_VER

ClientMessage_Register::ClientMessage_Register()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ClientMessage_Register::InitAsDefaultInstance() {
}

ClientMessage_Register::ClientMessage_Register(const ClientMessage_Register& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ClientMessage_Register::SharedCtor() {
  _cached_size_ = 0;
  username_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  password_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  public_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClientMessage_Register::~ClientMessage_Register() {
  SharedDtor();
}

void ClientMessage_Register::SharedDtor() {
  if (username_ != &::google::protobuf::internal::kEmptyString) {
    delete username_;
  }
  if (password_ != &::google::protobuf::internal::kEmptyString) {
    delete password_;
  }
  if (public_key_ != &::google::protobuf::internal::kEmptyString) {
    delete public_key_;
  }
  if (this != default_instance_) {
  }
}

void ClientMessage_Register::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClientMessage_Register::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClientMessage_Register_descriptor_;
}

const ClientMessage_Register& ClientMessage_Register::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_sp2p_5fprotocol_2eproto();
  return *default_instance_;
}

ClientMessage_Register* ClientMessage_Register::default_instance_ = NULL;

ClientMessage_Register* ClientMessage_Register::New() const {
  return new ClientMessage_Register;
}

void ClientMessage_Register::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_username()) {
      if (username_ != &::google::protobuf::internal::kEmptyString) {
        username_->clear();
      }
    }
    if (has_password()) {
      if (password_ != &::google::protobuf::internal::kEmptyString) {
        password_->clear();
      }
    }
    if (has_public_key()) {
      if (public_key_ != &::google::protobuf::internal::kEmptyString) {
        public_key_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ClientMessage_Register::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string username = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_username()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->username().data(), this->username().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_password;
        break;
      }

      // required string password = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_password:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_password()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->password().data(), this->password().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_public_key;
        break;
      }

      // required string public_key = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_public_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_public_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->public_key().data(), this->public_key().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ClientMessage_Register::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string username = 1;
  if (has_username()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->username(), output);
  }

  // required string password = 2;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->password(), output);
  }

  // required string public_key = 3;
  if (has_public_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->public_key().data(), this->public_key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->public_key(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ClientMessage_Register::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string username = 1;
  if (has_username()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->username(), target);
  }

  // required string password = 2;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->password(), target);
  }

  // required string public_key = 3;
  if (has_public_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->public_key().data(), this->public_key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->public_key(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ClientMessage_Register::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string username = 1;
    if (has_username()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->username());
    }

    // required string password = 2;
    if (has_password()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->password());
    }

    // required string public_key = 3;
    if (has_public_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->public_key());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClientMessage_Register::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ClientMessage_Register* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ClientMessage_Register*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ClientMessage_Register::MergeFrom(const ClientMessage_Register& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_username()) {
      set_username(from.username());
    }
    if (from.has_password()) {
      set_password(from.password());
    }
    if (from.has_public_key()) {
      set_public_key(from.public_key());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ClientMessage_Register::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientMessage_Register::CopyFrom(const ClientMessage_Register& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientMessage_Register::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void ClientMessage_Register::Swap(ClientMessage_Register* other) {
  if (other != this) {
    std::swap(username_, other->username_);
    std::swap(password_, other->password_);
    std::swap(public_key_, other->public_key_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ClientMessage_Register::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClientMessage_Register_descriptor_;
  metadata.reflection = ClientMessage_Register_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int ClientMessage_Unregister::kCookieFieldNumber;
#endif  // !_MSC_VER

ClientMessage_Unregister::ClientMessage_Unregister()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ClientMessage_Unregister::InitAsDefaultInstance() {
}

ClientMessage_Unregister::ClientMessage_Unregister(const ClientMessage_Unregister& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ClientMessage_Unregister::SharedCtor() {
  _cached_size_ = 0;
  cookie_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClientMessage_Unregister::~ClientMessage_Unregister() {
  SharedDtor();
}

void ClientMessage_Unregister::SharedDtor() {
  if (cookie_ != &::google::protobuf::internal::kEmptyString) {
    delete cookie_;
  }
  if (this != default_instance_) {
  }
}

void ClientMessage_Unregister::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClientMessage_Unregister::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClientMessage_Unregister_descriptor_;
}

const ClientMessage_Unregister& ClientMessage_Unregister::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_sp2p_5fprotocol_2eproto();
  return *default_instance_;
}

ClientMessage_Unregister* ClientMessage_Unregister::default_instance_ = NULL;

ClientMessage_Unregister* ClientMessage_Unregister::New() const {
  return new ClientMessage_Unregister;
}

void ClientMessage_Unregister::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_cookie()) {
      if (cookie_ != &::google::protobuf::internal::kEmptyString) {
        cookie_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ClientMessage_Unregister::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string cookie = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cookie()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->cookie().data(), this->cookie().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ClientMessage_Unregister::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string cookie = 1;
  if (has_cookie()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cookie().data(), this->cookie().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->cookie(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ClientMessage_Unregister::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string cookie = 1;
  if (has_cookie()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cookie().data(), this->cookie().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->cookie(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ClientMessage_Unregister::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string cookie = 1;
    if (has_cookie()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cookie());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClientMessage_Unregister::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ClientMessage_Unregister* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ClientMessage_Unregister*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ClientMessage_Unregister::MergeFrom(const ClientMessage_Unregister& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cookie()) {
      set_cookie(from.cookie());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ClientMessage_Unregister::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientMessage_Unregister::CopyFrom(const ClientMessage_Unregister& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientMessage_Unregister::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ClientMessage_Unregister::Swap(ClientMessage_Unregister* other) {
  if (other != this) {
    std::swap(cookie_, other->cookie_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ClientMessage_Unregister::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClientMessage_Unregister_descriptor_;
  metadata.reflection = ClientMessage_Unregister_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int ClientMessage_Login::kUsernameFieldNumber;
const int ClientMessage_Login::kPasswordFieldNumber;
#endif  // !_MSC_VER

ClientMessage_Login::ClientMessage_Login()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ClientMessage_Login::InitAsDefaultInstance() {
}

ClientMessage_Login::ClientMessage_Login(const ClientMessage_Login& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ClientMessage_Login::SharedCtor() {
  _cached_size_ = 0;
  username_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  password_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClientMessage_Login::~ClientMessage_Login() {
  SharedDtor();
}

void ClientMessage_Login::SharedDtor() {
  if (username_ != &::google::protobuf::internal::kEmptyString) {
    delete username_;
  }
  if (password_ != &::google::protobuf::internal::kEmptyString) {
    delete password_;
  }
  if (this != default_instance_) {
  }
}

void ClientMessage_Login::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClientMessage_Login::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClientMessage_Login_descriptor_;
}

const ClientMessage_Login& ClientMessage_Login::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_sp2p_5fprotocol_2eproto();
  return *default_instance_;
}

ClientMessage_Login* ClientMessage_Login::default_instance_ = NULL;

ClientMessage_Login* ClientMessage_Login::New() const {
  return new ClientMessage_Login;
}

void ClientMessage_Login::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_username()) {
      if (username_ != &::google::protobuf::internal::kEmptyString) {
        username_->clear();
      }
    }
    if (has_password()) {
      if (password_ != &::google::protobuf::internal::kEmptyString) {
        password_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ClientMessage_Login::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string username = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_username()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->username().data(), this->username().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_password;
        break;
      }

      // required string password = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_password:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_password()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->password().data(), this->password().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ClientMessage_Login::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string username = 1;
  if (has_username()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->username(), output);
  }

  // required string password = 2;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->password(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ClientMessage_Login::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string username = 1;
  if (has_username()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->username(), target);
  }

  // required string password = 2;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->password(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ClientMessage_Login::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string username = 1;
    if (has_username()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->username());
    }

    // required string password = 2;
    if (has_password()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->password());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClientMessage_Login::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ClientMessage_Login* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ClientMessage_Login*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ClientMessage_Login::MergeFrom(const ClientMessage_Login& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_username()) {
      set_username(from.username());
    }
    if (from.has_password()) {
      set_password(from.password());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ClientMessage_Login::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientMessage_Login::CopyFrom(const ClientMessage_Login& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientMessage_Login::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void ClientMessage_Login::Swap(ClientMessage_Login* other) {
  if (other != this) {
    std::swap(username_, other->username_);
    std::swap(password_, other->password_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ClientMessage_Login::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClientMessage_Login_descriptor_;
  metadata.reflection = ClientMessage_Login_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int ClientMessage_Logout::kCookieFieldNumber;
#endif  // !_MSC_VER

ClientMessage_Logout::ClientMessage_Logout()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ClientMessage_Logout::InitAsDefaultInstance() {
}

ClientMessage_Logout::ClientMessage_Logout(const ClientMessage_Logout& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ClientMessage_Logout::SharedCtor() {
  _cached_size_ = 0;
  cookie_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClientMessage_Logout::~ClientMessage_Logout() {
  SharedDtor();
}

void ClientMessage_Logout::SharedDtor() {
  if (cookie_ != &::google::protobuf::internal::kEmptyString) {
    delete cookie_;
  }
  if (this != default_instance_) {
  }
}

void ClientMessage_Logout::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClientMessage_Logout::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClientMessage_Logout_descriptor_;
}

const ClientMessage_Logout& ClientMessage_Logout::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_sp2p_5fprotocol_2eproto();
  return *default_instance_;
}

ClientMessage_Logout* ClientMessage_Logout::default_instance_ = NULL;

ClientMessage_Logout* ClientMessage_Logout::New() const {
  return new ClientMessage_Logout;
}

void ClientMessage_Logout::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_cookie()) {
      if (cookie_ != &::google::protobuf::internal::kEmptyString) {
        cookie_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ClientMessage_Logout::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string cookie = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cookie()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->cookie().data(), this->cookie().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ClientMessage_Logout::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string cookie = 1;
  if (has_cookie()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cookie().data(), this->cookie().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->cookie(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ClientMessage_Logout::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string cookie = 1;
  if (has_cookie()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cookie().data(), this->cookie().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->cookie(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ClientMessage_Logout::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string cookie = 1;
    if (has_cookie()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cookie());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClientMessage_Logout::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ClientMessage_Logout* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ClientMessage_Logout*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ClientMessage_Logout::MergeFrom(const ClientMessage_Logout& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cookie()) {
      set_cookie(from.cookie());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ClientMessage_Logout::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientMessage_Logout::CopyFrom(const ClientMessage_Logout& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientMessage_Logout::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ClientMessage_Logout::Swap(ClientMessage_Logout* other) {
  if (other != this) {
    std::swap(cookie_, other->cookie_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ClientMessage_Logout::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClientMessage_Logout_descriptor_;
  metadata.reflection = ClientMessage_Logout_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int ClientMessage_ListNetworks::kCookieFieldNumber;
#endif  // !_MSC_VER

ClientMessage_ListNetworks::ClientMessage_ListNetworks()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ClientMessage_ListNetworks::InitAsDefaultInstance() {
}

ClientMessage_ListNetworks::ClientMessage_ListNetworks(const ClientMessage_ListNetworks& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ClientMessage_ListNetworks::SharedCtor() {
  _cached_size_ = 0;
  cookie_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClientMessage_ListNetworks::~ClientMessage_ListNetworks() {
  SharedDtor();
}

void ClientMessage_ListNetworks::SharedDtor() {
  if (cookie_ != &::google::protobuf::internal::kEmptyString) {
    delete cookie_;
  }
  if (this != default_instance_) {
  }
}

void ClientMessage_ListNetworks::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClientMessage_ListNetworks::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClientMessage_ListNetworks_descriptor_;
}

const ClientMessage_ListNetworks& ClientMessage_ListNetworks::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_sp2p_5fprotocol_2eproto();
  return *default_instance_;
}

ClientMessage_ListNetworks* ClientMessage_ListNetworks::default_instance_ = NULL;

ClientMessage_ListNetworks* ClientMessage_ListNetworks::New() const {
  return new ClientMessage_ListNetworks;
}

void ClientMessage_ListNetworks::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_cookie()) {
      if (cookie_ != &::google::protobuf::internal::kEmptyString) {
        cookie_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ClientMessage_ListNetworks::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string cookie = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cookie()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->cookie().data(), this->cookie().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ClientMessage_ListNetworks::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string cookie = 1;
  if (has_cookie()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cookie().data(), this->cookie().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->cookie(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ClientMessage_ListNetworks::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string cookie = 1;
  if (has_cookie()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cookie().data(), this->cookie().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->cookie(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ClientMessage_ListNetworks::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string cookie = 1;
    if (has_cookie()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cookie());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClientMessage_ListNetworks::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ClientMessage_ListNetworks* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ClientMessage_ListNetworks*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ClientMessage_ListNetworks::MergeFrom(const ClientMessage_ListNetworks& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cookie()) {
      set_cookie(from.cookie());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ClientMessage_ListNetworks::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientMessage_ListNetworks::CopyFrom(const ClientMessage_ListNetworks& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientMessage_ListNetworks::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ClientMessage_ListNetworks::Swap(ClientMessage_ListNetworks* other) {
  if (other != this) {
    std::swap(cookie_, other->cookie_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ClientMessage_ListNetworks::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClientMessage_ListNetworks_descriptor_;
  metadata.reflection = ClientMessage_ListNetworks_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int ClientMessage_ListMyNetworks::kCookieFieldNumber;
#endif  // !_MSC_VER

ClientMessage_ListMyNetworks::ClientMessage_ListMyNetworks()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ClientMessage_ListMyNetworks::InitAsDefaultInstance() {
}

ClientMessage_ListMyNetworks::ClientMessage_ListMyNetworks(const ClientMessage_ListMyNetworks& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ClientMessage_ListMyNetworks::SharedCtor() {
  _cached_size_ = 0;
  cookie_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClientMessage_ListMyNetworks::~ClientMessage_ListMyNetworks() {
  SharedDtor();
}

void ClientMessage_ListMyNetworks::SharedDtor() {
  if (cookie_ != &::google::protobuf::internal::kEmptyString) {
    delete cookie_;
  }
  if (this != default_instance_) {
  }
}

void ClientMessage_ListMyNetworks::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClientMessage_ListMyNetworks::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClientMessage_ListMyNetworks_descriptor_;
}

const ClientMessage_ListMyNetworks& ClientMessage_ListMyNetworks::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_sp2p_5fprotocol_2eproto();
  return *default_instance_;
}

ClientMessage_ListMyNetworks* ClientMessage_ListMyNetworks::default_instance_ = NULL;

ClientMessage_ListMyNetworks* ClientMessage_ListMyNetworks::New() const {
  return new ClientMessage_ListMyNetworks;
}

void ClientMessage_ListMyNetworks::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_cookie()) {
      if (cookie_ != &::google::protobuf::internal::kEmptyString) {
        cookie_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ClientMessage_ListMyNetworks::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string cookie = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cookie()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->cookie().data(), this->cookie().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ClientMessage_ListMyNetworks::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string cookie = 1;
  if (has_cookie()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cookie().data(), this->cookie().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->cookie(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ClientMessage_ListMyNetworks::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string cookie = 1;
  if (has_cookie()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cookie().data(), this->cookie().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->cookie(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ClientMessage_ListMyNetworks::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string cookie = 1;
    if (has_cookie()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cookie());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClientMessage_ListMyNetworks::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ClientMessage_ListMyNetworks* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ClientMessage_ListMyNetworks*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ClientMessage_ListMyNetworks::MergeFrom(const ClientMessage_ListMyNetworks& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cookie()) {
      set_cookie(from.cookie());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ClientMessage_ListMyNetworks::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientMessage_ListMyNetworks::CopyFrom(const ClientMessage_ListMyNetworks& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientMessage_ListMyNetworks::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ClientMessage_ListMyNetworks::Swap(ClientMessage_ListMyNetworks* other) {
  if (other != this) {
    std::swap(cookie_, other->cookie_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ClientMessage_ListMyNetworks::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClientMessage_ListMyNetworks_descriptor_;
  metadata.reflection = ClientMessage_ListMyNetworks_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int ClientMessage_ListServers::kCookieFieldNumber;
const int ClientMessage_ListServers::kNetworkNameFieldNumber;
#endif  // !_MSC_VER

ClientMessage_ListServers::ClientMessage_ListServers()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ClientMessage_ListServers::InitAsDefaultInstance() {
}

ClientMessage_ListServers::ClientMessage_ListServers(const ClientMessage_ListServers& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ClientMessage_ListServers::SharedCtor() {
  _cached_size_ = 0;
  cookie_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  network_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClientMessage_ListServers::~ClientMessage_ListServers() {
  SharedDtor();
}

void ClientMessage_ListServers::SharedDtor() {
  if (cookie_ != &::google::protobuf::internal::kEmptyString) {
    delete cookie_;
  }
  if (network_name_ != &::google::protobuf::internal::kEmptyString) {
    delete network_name_;
  }
  if (this != default_instance_) {
  }
}

void ClientMessage_ListServers::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClientMessage_ListServers::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClientMessage_ListServers_descriptor_;
}

const ClientMessage_ListServers& ClientMessage_ListServers::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_sp2p_5fprotocol_2eproto();
  return *default_instance_;
}

ClientMessage_ListServers* ClientMessage_ListServers::default_instance_ = NULL;

ClientMessage_ListServers* ClientMessage_ListServers::New() const {
  return new ClientMessage_ListServers;
}

void ClientMessage_ListServers::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_cookie()) {
      if (cookie_ != &::google::protobuf::internal::kEmptyString) {
        cookie_->clear();
      }
    }
    if (has_network_name()) {
      if (network_name_ != &::google::protobuf::internal::kEmptyString) {
        network_name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ClientMessage_ListServers::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string cookie = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cookie()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->cookie().data(), this->cookie().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_network_name;
        break;
      }

      // required string network_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_network_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_network_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->network_name().data(), this->network_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ClientMessage_ListServers::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string cookie = 1;
  if (has_cookie()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cookie().data(), this->cookie().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->cookie(), output);
  }

  // required string network_name = 2;
  if (has_network_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->network_name().data(), this->network_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->network_name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ClientMessage_ListServers::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string cookie = 1;
  if (has_cookie()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cookie().data(), this->cookie().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->cookie(), target);
  }

  // required string network_name = 2;
  if (has_network_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->network_name().data(), this->network_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->network_name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ClientMessage_ListServers::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string cookie = 1;
    if (has_cookie()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cookie());
    }

    // required string network_name = 2;
    if (has_network_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->network_name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClientMessage_ListServers::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ClientMessage_ListServers* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ClientMessage_ListServers*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ClientMessage_ListServers::MergeFrom(const ClientMessage_ListServers& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cookie()) {
      set_cookie(from.cookie());
    }
    if (from.has_network_name()) {
      set_network_name(from.network_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ClientMessage_ListServers::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientMessage_ListServers::CopyFrom(const ClientMessage_ListServers& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientMessage_ListServers::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void ClientMessage_ListServers::Swap(ClientMessage_ListServers* other) {
  if (other != this) {
    std::swap(cookie_, other->cookie_);
    std::swap(network_name_, other->network_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ClientMessage_ListServers::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClientMessage_ListServers_descriptor_;
  metadata.reflection = ClientMessage_ListServers_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

const ::google::protobuf::EnumDescriptor* ClientMessage_CreateNetwork_AccessRights_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClientMessage_CreateNetwork_AccessRights_descriptor_;
}
bool ClientMessage_CreateNetwork_AccessRights_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ClientMessage_CreateNetwork_AccessRights ClientMessage_CreateNetwork::PUBLIC;
const ClientMessage_CreateNetwork_AccessRights ClientMessage_CreateNetwork::PRIVATE;
const ClientMessage_CreateNetwork_AccessRights ClientMessage_CreateNetwork::AccessRights_MIN;
const ClientMessage_CreateNetwork_AccessRights ClientMessage_CreateNetwork::AccessRights_MAX;
const int ClientMessage_CreateNetwork::AccessRights_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* ClientMessage_CreateNetwork_Visiblity_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClientMessage_CreateNetwork_Visiblity_descriptor_;
}
bool ClientMessage_CreateNetwork_Visiblity_IsValid(int value) {
  switch(value) {
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ClientMessage_CreateNetwork_Visiblity ClientMessage_CreateNetwork::LISTED;
const ClientMessage_CreateNetwork_Visiblity ClientMessage_CreateNetwork::UNLISTED;
const ClientMessage_CreateNetwork_Visiblity ClientMessage_CreateNetwork::Visiblity_MIN;
const ClientMessage_CreateNetwork_Visiblity ClientMessage_CreateNetwork::Visiblity_MAX;
const int ClientMessage_CreateNetwork::Visiblity_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* ClientMessage_CreateNetwork_ParticipationRights_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClientMessage_CreateNetwork_ParticipationRights_descriptor_;
}
bool ClientMessage_CreateNetwork_ParticipationRights_IsValid(int value) {
  switch(value) {
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ClientMessage_CreateNetwork_ParticipationRights ClientMessage_CreateNetwork::CLIENT_ONLY;
const ClientMessage_CreateNetwork_ParticipationRights ClientMessage_CreateNetwork::CLIENT_SERVER;
const ClientMessage_CreateNetwork_ParticipationRights ClientMessage_CreateNetwork::ParticipationRights_MIN;
const ClientMessage_CreateNetwork_ParticipationRights ClientMessage_CreateNetwork::ParticipationRights_MAX;
const int ClientMessage_CreateNetwork::ParticipationRights_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ClientMessage_CreateNetwork::kCookieFieldNumber;
const int ClientMessage_CreateNetwork::kNetworkNameFieldNumber;
const int ClientMessage_CreateNetwork::kAccessRightsFieldNumber;
const int ClientMessage_CreateNetwork::kVisibilityFieldNumber;
const int ClientMessage_CreateNetwork::kParticipationRightsFieldNumber;
const int ClientMessage_CreateNetwork::kCreatorEmailFieldNumber;
const int ClientMessage_CreateNetwork::kProtocolNameFieldNumber;
#endif  // !_MSC_VER

ClientMessage_CreateNetwork::ClientMessage_CreateNetwork()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ClientMessage_CreateNetwork::InitAsDefaultInstance() {
}

ClientMessage_CreateNetwork::ClientMessage_CreateNetwork(const ClientMessage_CreateNetwork& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ClientMessage_CreateNetwork::SharedCtor() {
  _cached_size_ = 0;
  cookie_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  network_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  access_rights_ = 1;
  visibility_ = 3;
  participation_rights_ = 5;
  creator_email_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  protocol_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClientMessage_CreateNetwork::~ClientMessage_CreateNetwork() {
  SharedDtor();
}

void ClientMessage_CreateNetwork::SharedDtor() {
  if (cookie_ != &::google::protobuf::internal::kEmptyString) {
    delete cookie_;
  }
  if (network_name_ != &::google::protobuf::internal::kEmptyString) {
    delete network_name_;
  }
  if (creator_email_ != &::google::protobuf::internal::kEmptyString) {
    delete creator_email_;
  }
  if (protocol_name_ != &::google::protobuf::internal::kEmptyString) {
    delete protocol_name_;
  }
  if (this != default_instance_) {
  }
}

void ClientMessage_CreateNetwork::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClientMessage_CreateNetwork::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClientMessage_CreateNetwork_descriptor_;
}

const ClientMessage_CreateNetwork& ClientMessage_CreateNetwork::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_sp2p_5fprotocol_2eproto();
  return *default_instance_;
}

ClientMessage_CreateNetwork* ClientMessage_CreateNetwork::default_instance_ = NULL;

ClientMessage_CreateNetwork* ClientMessage_CreateNetwork::New() const {
  return new ClientMessage_CreateNetwork;
}

void ClientMessage_CreateNetwork::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_cookie()) {
      if (cookie_ != &::google::protobuf::internal::kEmptyString) {
        cookie_->clear();
      }
    }
    if (has_network_name()) {
      if (network_name_ != &::google::protobuf::internal::kEmptyString) {
        network_name_->clear();
      }
    }
    access_rights_ = 1;
    visibility_ = 3;
    participation_rights_ = 5;
    if (has_creator_email()) {
      if (creator_email_ != &::google::protobuf::internal::kEmptyString) {
        creator_email_->clear();
      }
    }
    if (has_protocol_name()) {
      if (protocol_name_ != &::google::protobuf::internal::kEmptyString) {
        protocol_name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ClientMessage_CreateNetwork::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string cookie = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cookie()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->cookie().data(), this->cookie().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_network_name;
        break;
      }

      // required string network_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_network_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_network_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->network_name().data(), this->network_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_access_rights;
        break;
      }

      // required .ClientMessage.CreateNetwork.AccessRights access_rights = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_access_rights:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ClientMessage_CreateNetwork_AccessRights_IsValid(value)) {
            set_access_rights(static_cast< ::ClientMessage_CreateNetwork_AccessRights >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_visibility;
        break;
      }

      // required .ClientMessage.CreateNetwork.Visiblity visibility = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_visibility:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ClientMessage_CreateNetwork_Visiblity_IsValid(value)) {
            set_visibility(static_cast< ::ClientMessage_CreateNetwork_Visiblity >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_participation_rights;
        break;
      }

      // required .ClientMessage.CreateNetwork.ParticipationRights participation_rights = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_participation_rights:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ClientMessage_CreateNetwork_ParticipationRights_IsValid(value)) {
            set_participation_rights(static_cast< ::ClientMessage_CreateNetwork_ParticipationRights >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_creator_email;
        break;
      }

      // optional string creator_email = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_creator_email:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_creator_email()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->creator_email().data(), this->creator_email().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_protocol_name;
        break;
      }

      // optional string protocol_name = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_protocol_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_protocol_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->protocol_name().data(), this->protocol_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ClientMessage_CreateNetwork::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string cookie = 1;
  if (has_cookie()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cookie().data(), this->cookie().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->cookie(), output);
  }

  // required string network_name = 2;
  if (has_network_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->network_name().data(), this->network_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->network_name(), output);
  }

  // required .ClientMessage.CreateNetwork.AccessRights access_rights = 3;
  if (has_access_rights()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->access_rights(), output);
  }

  // required .ClientMessage.CreateNetwork.Visiblity visibility = 4;
  if (has_visibility()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->visibility(), output);
  }

  // required .ClientMessage.CreateNetwork.ParticipationRights participation_rights = 5;
  if (has_participation_rights()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->participation_rights(), output);
  }

  // optional string creator_email = 6;
  if (has_creator_email()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->creator_email().data(), this->creator_email().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->creator_email(), output);
  }

  // optional string protocol_name = 7;
  if (has_protocol_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->protocol_name().data(), this->protocol_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->protocol_name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ClientMessage_CreateNetwork::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string cookie = 1;
  if (has_cookie()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cookie().data(), this->cookie().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->cookie(), target);
  }

  // required string network_name = 2;
  if (has_network_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->network_name().data(), this->network_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->network_name(), target);
  }

  // required .ClientMessage.CreateNetwork.AccessRights access_rights = 3;
  if (has_access_rights()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->access_rights(), target);
  }

  // required .ClientMessage.CreateNetwork.Visiblity visibility = 4;
  if (has_visibility()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->visibility(), target);
  }

  // required .ClientMessage.CreateNetwork.ParticipationRights participation_rights = 5;
  if (has_participation_rights()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->participation_rights(), target);
  }

  // optional string creator_email = 6;
  if (has_creator_email()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->creator_email().data(), this->creator_email().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->creator_email(), target);
  }

  // optional string protocol_name = 7;
  if (has_protocol_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->protocol_name().data(), this->protocol_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->protocol_name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ClientMessage_CreateNetwork::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string cookie = 1;
    if (has_cookie()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cookie());
    }

    // required string network_name = 2;
    if (has_network_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->network_name());
    }

    // required .ClientMessage.CreateNetwork.AccessRights access_rights = 3;
    if (has_access_rights()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->access_rights());
    }

    // required .ClientMessage.CreateNetwork.Visiblity visibility = 4;
    if (has_visibility()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->visibility());
    }

    // required .ClientMessage.CreateNetwork.ParticipationRights participation_rights = 5;
    if (has_participation_rights()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->participation_rights());
    }

    // optional string creator_email = 6;
    if (has_creator_email()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->creator_email());
    }

    // optional string protocol_name = 7;
    if (has_protocol_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->protocol_name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClientMessage_CreateNetwork::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ClientMessage_CreateNetwork* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ClientMessage_CreateNetwork*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ClientMessage_CreateNetwork::MergeFrom(const ClientMessage_CreateNetwork& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cookie()) {
      set_cookie(from.cookie());
    }
    if (from.has_network_name()) {
      set_network_name(from.network_name());
    }
    if (from.has_access_rights()) {
      set_access_rights(from.access_rights());
    }
    if (from.has_visibility()) {
      set_visibility(from.visibility());
    }
    if (from.has_participation_rights()) {
      set_participation_rights(from.participation_rights());
    }
    if (from.has_creator_email()) {
      set_creator_email(from.creator_email());
    }
    if (from.has_protocol_name()) {
      set_protocol_name(from.protocol_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ClientMessage_CreateNetwork::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientMessage_CreateNetwork::CopyFrom(const ClientMessage_CreateNetwork& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientMessage_CreateNetwork::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void ClientMessage_CreateNetwork::Swap(ClientMessage_CreateNetwork* other) {
  if (other != this) {
    std::swap(cookie_, other->cookie_);
    std::swap(network_name_, other->network_name_);
    std::swap(access_rights_, other->access_rights_);
    std::swap(visibility_, other->visibility_);
    std::swap(participation_rights_, other->participation_rights_);
    std::swap(creator_email_, other->creator_email_);
    std::swap(protocol_name_, other->protocol_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ClientMessage_CreateNetwork::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClientMessage_CreateNetwork_descriptor_;
  metadata.reflection = ClientMessage_CreateNetwork_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int ClientMessage_DeleteNetwork::kCookieFieldNumber;
const int ClientMessage_DeleteNetwork::kNameFieldNumber;
#endif  // !_MSC_VER

ClientMessage_DeleteNetwork::ClientMessage_DeleteNetwork()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ClientMessage_DeleteNetwork::InitAsDefaultInstance() {
}

ClientMessage_DeleteNetwork::ClientMessage_DeleteNetwork(const ClientMessage_DeleteNetwork& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ClientMessage_DeleteNetwork::SharedCtor() {
  _cached_size_ = 0;
  cookie_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClientMessage_DeleteNetwork::~ClientMessage_DeleteNetwork() {
  SharedDtor();
}

void ClientMessage_DeleteNetwork::SharedDtor() {
  if (cookie_ != &::google::protobuf::internal::kEmptyString) {
    delete cookie_;
  }
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void ClientMessage_DeleteNetwork::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClientMessage_DeleteNetwork::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClientMessage_DeleteNetwork_descriptor_;
}

const ClientMessage_DeleteNetwork& ClientMessage_DeleteNetwork::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_sp2p_5fprotocol_2eproto();
  return *default_instance_;
}

ClientMessage_DeleteNetwork* ClientMessage_DeleteNetwork::default_instance_ = NULL;

ClientMessage_DeleteNetwork* ClientMessage_DeleteNetwork::New() const {
  return new ClientMessage_DeleteNetwork;
}

void ClientMessage_DeleteNetwork::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_cookie()) {
      if (cookie_ != &::google::protobuf::internal::kEmptyString) {
        cookie_->clear();
      }
    }
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ClientMessage_DeleteNetwork::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string cookie = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cookie()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->cookie().data(), this->cookie().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // required string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ClientMessage_DeleteNetwork::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string cookie = 1;
  if (has_cookie()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cookie().data(), this->cookie().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->cookie(), output);
  }

  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ClientMessage_DeleteNetwork::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string cookie = 1;
  if (has_cookie()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cookie().data(), this->cookie().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->cookie(), target);
  }

  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ClientMessage_DeleteNetwork::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string cookie = 1;
    if (has_cookie()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cookie());
    }

    // required string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClientMessage_DeleteNetwork::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ClientMessage_DeleteNetwork* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ClientMessage_DeleteNetwork*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ClientMessage_DeleteNetwork::MergeFrom(const ClientMessage_DeleteNetwork& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cookie()) {
      set_cookie(from.cookie());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ClientMessage_DeleteNetwork::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientMessage_DeleteNetwork::CopyFrom(const ClientMessage_DeleteNetwork& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientMessage_DeleteNetwork::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void ClientMessage_DeleteNetwork::Swap(ClientMessage_DeleteNetwork* other) {
  if (other != this) {
    std::swap(cookie_, other->cookie_);
    std::swap(name_, other->name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ClientMessage_DeleteNetwork::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClientMessage_DeleteNetwork_descriptor_;
  metadata.reflection = ClientMessage_DeleteNetwork_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int ClientMessage_InviteUser::kCookieFieldNumber;
const int ClientMessage_InviteUser::kUsernameFieldNumber;
const int ClientMessage_InviteUser::kNetworkNameFieldNumber;
#endif  // !_MSC_VER

ClientMessage_InviteUser::ClientMessage_InviteUser()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ClientMessage_InviteUser::InitAsDefaultInstance() {
}

ClientMessage_InviteUser::ClientMessage_InviteUser(const ClientMessage_InviteUser& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ClientMessage_InviteUser::SharedCtor() {
  _cached_size_ = 0;
  cookie_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  username_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  network_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClientMessage_InviteUser::~ClientMessage_InviteUser() {
  SharedDtor();
}

void ClientMessage_InviteUser::SharedDtor() {
  if (cookie_ != &::google::protobuf::internal::kEmptyString) {
    delete cookie_;
  }
  if (username_ != &::google::protobuf::internal::kEmptyString) {
    delete username_;
  }
  if (network_name_ != &::google::protobuf::internal::kEmptyString) {
    delete network_name_;
  }
  if (this != default_instance_) {
  }
}

void ClientMessage_InviteUser::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClientMessage_InviteUser::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClientMessage_InviteUser_descriptor_;
}

const ClientMessage_InviteUser& ClientMessage_InviteUser::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_sp2p_5fprotocol_2eproto();
  return *default_instance_;
}

ClientMessage_InviteUser* ClientMessage_InviteUser::default_instance_ = NULL;

ClientMessage_InviteUser* ClientMessage_InviteUser::New() const {
  return new ClientMessage_InviteUser;
}

void ClientMessage_InviteUser::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_cookie()) {
      if (cookie_ != &::google::protobuf::internal::kEmptyString) {
        cookie_->clear();
      }
    }
    if (has_username()) {
      if (username_ != &::google::protobuf::internal::kEmptyString) {
        username_->clear();
      }
    }
    if (has_network_name()) {
      if (network_name_ != &::google::protobuf::internal::kEmptyString) {
        network_name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ClientMessage_InviteUser::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string cookie = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cookie()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->cookie().data(), this->cookie().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_username;
        break;
      }

      // required string username = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_username:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_username()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->username().data(), this->username().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_network_name;
        break;
      }

      // required string network_name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_network_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_network_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->network_name().data(), this->network_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ClientMessage_InviteUser::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string cookie = 1;
  if (has_cookie()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cookie().data(), this->cookie().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->cookie(), output);
  }

  // required string username = 2;
  if (has_username()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->username(), output);
  }

  // required string network_name = 3;
  if (has_network_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->network_name().data(), this->network_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->network_name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ClientMessage_InviteUser::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string cookie = 1;
  if (has_cookie()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cookie().data(), this->cookie().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->cookie(), target);
  }

  // required string username = 2;
  if (has_username()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->username(), target);
  }

  // required string network_name = 3;
  if (has_network_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->network_name().data(), this->network_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->network_name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ClientMessage_InviteUser::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string cookie = 1;
    if (has_cookie()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cookie());
    }

    // required string username = 2;
    if (has_username()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->username());
    }

    // required string network_name = 3;
    if (has_network_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->network_name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClientMessage_InviteUser::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ClientMessage_InviteUser* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ClientMessage_InviteUser*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ClientMessage_InviteUser::MergeFrom(const ClientMessage_InviteUser& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cookie()) {
      set_cookie(from.cookie());
    }
    if (from.has_username()) {
      set_username(from.username());
    }
    if (from.has_network_name()) {
      set_network_name(from.network_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ClientMessage_InviteUser::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientMessage_InviteUser::CopyFrom(const ClientMessage_InviteUser& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientMessage_InviteUser::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void ClientMessage_InviteUser::Swap(ClientMessage_InviteUser* other) {
  if (other != this) {
    std::swap(cookie_, other->cookie_);
    std::swap(username_, other->username_);
    std::swap(network_name_, other->network_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ClientMessage_InviteUser::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClientMessage_InviteUser_descriptor_;
  metadata.reflection = ClientMessage_InviteUser_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int ClientMessage_RemoveUser::kCookieFieldNumber;
const int ClientMessage_RemoveUser::kUsernameFieldNumber;
const int ClientMessage_RemoveUser::kNetworkNameFieldNumber;
#endif  // !_MSC_VER

ClientMessage_RemoveUser::ClientMessage_RemoveUser()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ClientMessage_RemoveUser::InitAsDefaultInstance() {
}

ClientMessage_RemoveUser::ClientMessage_RemoveUser(const ClientMessage_RemoveUser& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ClientMessage_RemoveUser::SharedCtor() {
  _cached_size_ = 0;
  cookie_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  username_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  network_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClientMessage_RemoveUser::~ClientMessage_RemoveUser() {
  SharedDtor();
}

void ClientMessage_RemoveUser::SharedDtor() {
  if (cookie_ != &::google::protobuf::internal::kEmptyString) {
    delete cookie_;
  }
  if (username_ != &::google::protobuf::internal::kEmptyString) {
    delete username_;
  }
  if (network_name_ != &::google::protobuf::internal::kEmptyString) {
    delete network_name_;
  }
  if (this != default_instance_) {
  }
}

void ClientMessage_RemoveUser::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClientMessage_RemoveUser::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClientMessage_RemoveUser_descriptor_;
}

const ClientMessage_RemoveUser& ClientMessage_RemoveUser::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_sp2p_5fprotocol_2eproto();
  return *default_instance_;
}

ClientMessage_RemoveUser* ClientMessage_RemoveUser::default_instance_ = NULL;

ClientMessage_RemoveUser* ClientMessage_RemoveUser::New() const {
  return new ClientMessage_RemoveUser;
}

void ClientMessage_RemoveUser::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_cookie()) {
      if (cookie_ != &::google::protobuf::internal::kEmptyString) {
        cookie_->clear();
      }
    }
    if (has_username()) {
      if (username_ != &::google::protobuf::internal::kEmptyString) {
        username_->clear();
      }
    }
    if (has_network_name()) {
      if (network_name_ != &::google::protobuf::internal::kEmptyString) {
        network_name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ClientMessage_RemoveUser::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string cookie = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cookie()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->cookie().data(), this->cookie().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_username;
        break;
      }

      // required string username = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_username:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_username()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->username().data(), this->username().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_network_name;
        break;
      }

      // required string network_name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_network_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_network_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->network_name().data(), this->network_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ClientMessage_RemoveUser::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string cookie = 1;
  if (has_cookie()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cookie().data(), this->cookie().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->cookie(), output);
  }

  // required string username = 2;
  if (has_username()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->username(), output);
  }

  // required string network_name = 3;
  if (has_network_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->network_name().data(), this->network_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->network_name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ClientMessage_RemoveUser::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string cookie = 1;
  if (has_cookie()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cookie().data(), this->cookie().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->cookie(), target);
  }

  // required string username = 2;
  if (has_username()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->username(), target);
  }

  // required string network_name = 3;
  if (has_network_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->network_name().data(), this->network_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->network_name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ClientMessage_RemoveUser::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string cookie = 1;
    if (has_cookie()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cookie());
    }

    // required string username = 2;
    if (has_username()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->username());
    }

    // required string network_name = 3;
    if (has_network_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->network_name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClientMessage_RemoveUser::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ClientMessage_RemoveUser* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ClientMessage_RemoveUser*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ClientMessage_RemoveUser::MergeFrom(const ClientMessage_RemoveUser& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cookie()) {
      set_cookie(from.cookie());
    }
    if (from.has_username()) {
      set_username(from.username());
    }
    if (from.has_network_name()) {
      set_network_name(from.network_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ClientMessage_RemoveUser::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientMessage_RemoveUser::CopyFrom(const ClientMessage_RemoveUser& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientMessage_RemoveUser::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void ClientMessage_RemoveUser::Swap(ClientMessage_RemoveUser* other) {
  if (other != this) {
    std::swap(cookie_, other->cookie_);
    std::swap(username_, other->username_);
    std::swap(network_name_, other->network_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ClientMessage_RemoveUser::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClientMessage_RemoveUser_descriptor_;
  metadata.reflection = ClientMessage_RemoveUser_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int ClientMessage_UserInfo::kCookieFieldNumber;
const int ClientMessage_UserInfo::kUsernameFieldNumber;
const int ClientMessage_UserInfo::kNetworkNameFieldNumber;
#endif  // !_MSC_VER

ClientMessage_UserInfo::ClientMessage_UserInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ClientMessage_UserInfo::InitAsDefaultInstance() {
}

ClientMessage_UserInfo::ClientMessage_UserInfo(const ClientMessage_UserInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ClientMessage_UserInfo::SharedCtor() {
  _cached_size_ = 0;
  cookie_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  username_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  network_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClientMessage_UserInfo::~ClientMessage_UserInfo() {
  SharedDtor();
}

void ClientMessage_UserInfo::SharedDtor() {
  if (cookie_ != &::google::protobuf::internal::kEmptyString) {
    delete cookie_;
  }
  if (username_ != &::google::protobuf::internal::kEmptyString) {
    delete username_;
  }
  if (network_name_ != &::google::protobuf::internal::kEmptyString) {
    delete network_name_;
  }
  if (this != default_instance_) {
  }
}

void ClientMessage_UserInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClientMessage_UserInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClientMessage_UserInfo_descriptor_;
}

const ClientMessage_UserInfo& ClientMessage_UserInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_sp2p_5fprotocol_2eproto();
  return *default_instance_;
}

ClientMessage_UserInfo* ClientMessage_UserInfo::default_instance_ = NULL;

ClientMessage_UserInfo* ClientMessage_UserInfo::New() const {
  return new ClientMessage_UserInfo;
}

void ClientMessage_UserInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_cookie()) {
      if (cookie_ != &::google::protobuf::internal::kEmptyString) {
        cookie_->clear();
      }
    }
    if (has_username()) {
      if (username_ != &::google::protobuf::internal::kEmptyString) {
        username_->clear();
      }
    }
    if (has_network_name()) {
      if (network_name_ != &::google::protobuf::internal::kEmptyString) {
        network_name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ClientMessage_UserInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string cookie = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cookie()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->cookie().data(), this->cookie().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_username;
        break;
      }

      // required string username = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_username:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_username()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->username().data(), this->username().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_network_name;
        break;
      }

      // required string network_name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_network_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_network_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->network_name().data(), this->network_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ClientMessage_UserInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string cookie = 1;
  if (has_cookie()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cookie().data(), this->cookie().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->cookie(), output);
  }

  // required string username = 2;
  if (has_username()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->username(), output);
  }

  // required string network_name = 3;
  if (has_network_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->network_name().data(), this->network_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->network_name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ClientMessage_UserInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string cookie = 1;
  if (has_cookie()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cookie().data(), this->cookie().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->cookie(), target);
  }

  // required string username = 2;
  if (has_username()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->username(), target);
  }

  // required string network_name = 3;
  if (has_network_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->network_name().data(), this->network_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->network_name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ClientMessage_UserInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string cookie = 1;
    if (has_cookie()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cookie());
    }

    // required string username = 2;
    if (has_username()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->username());
    }

    // required string network_name = 3;
    if (has_network_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->network_name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClientMessage_UserInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ClientMessage_UserInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ClientMessage_UserInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ClientMessage_UserInfo::MergeFrom(const ClientMessage_UserInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cookie()) {
      set_cookie(from.cookie());
    }
    if (from.has_username()) {
      set_username(from.username());
    }
    if (from.has_network_name()) {
      set_network_name(from.network_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ClientMessage_UserInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientMessage_UserInfo::CopyFrom(const ClientMessage_UserInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientMessage_UserInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void ClientMessage_UserInfo::Swap(ClientMessage_UserInfo* other) {
  if (other != this) {
    std::swap(cookie_, other->cookie_);
    std::swap(username_, other->username_);
    std::swap(network_name_, other->network_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ClientMessage_UserInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClientMessage_UserInfo_descriptor_;
  metadata.reflection = ClientMessage_UserInfo_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int ClientMessage_UpdateServer::kCookieFieldNumber;
const int ClientMessage_UpdateServer::kNetworkNameFieldNumber;
const int ClientMessage_UpdateServer::kPortNumberFieldNumber;
#endif  // !_MSC_VER

ClientMessage_UpdateServer::ClientMessage_UpdateServer()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ClientMessage_UpdateServer::InitAsDefaultInstance() {
}

ClientMessage_UpdateServer::ClientMessage_UpdateServer(const ClientMessage_UpdateServer& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ClientMessage_UpdateServer::SharedCtor() {
  _cached_size_ = 0;
  cookie_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  network_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  port_number_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClientMessage_UpdateServer::~ClientMessage_UpdateServer() {
  SharedDtor();
}

void ClientMessage_UpdateServer::SharedDtor() {
  if (cookie_ != &::google::protobuf::internal::kEmptyString) {
    delete cookie_;
  }
  if (network_name_ != &::google::protobuf::internal::kEmptyString) {
    delete network_name_;
  }
  if (this != default_instance_) {
  }
}

void ClientMessage_UpdateServer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClientMessage_UpdateServer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClientMessage_UpdateServer_descriptor_;
}

const ClientMessage_UpdateServer& ClientMessage_UpdateServer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_sp2p_5fprotocol_2eproto();
  return *default_instance_;
}

ClientMessage_UpdateServer* ClientMessage_UpdateServer::default_instance_ = NULL;

ClientMessage_UpdateServer* ClientMessage_UpdateServer::New() const {
  return new ClientMessage_UpdateServer;
}

void ClientMessage_UpdateServer::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_cookie()) {
      if (cookie_ != &::google::protobuf::internal::kEmptyString) {
        cookie_->clear();
      }
    }
    if (has_network_name()) {
      if (network_name_ != &::google::protobuf::internal::kEmptyString) {
        network_name_->clear();
      }
    }
    port_number_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ClientMessage_UpdateServer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string cookie = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cookie()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->cookie().data(), this->cookie().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_network_name;
        break;
      }

      // required string network_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_network_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_network_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->network_name().data(), this->network_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_port_number;
        break;
      }

      // required int32 port_number = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_port_number:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &port_number_)));
          set_has_port_number();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ClientMessage_UpdateServer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string cookie = 1;
  if (has_cookie()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cookie().data(), this->cookie().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->cookie(), output);
  }

  // required string network_name = 2;
  if (has_network_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->network_name().data(), this->network_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->network_name(), output);
  }

  // required int32 port_number = 3;
  if (has_port_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->port_number(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ClientMessage_UpdateServer::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string cookie = 1;
  if (has_cookie()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cookie().data(), this->cookie().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->cookie(), target);
  }

  // required string network_name = 2;
  if (has_network_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->network_name().data(), this->network_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->network_name(), target);
  }

  // required int32 port_number = 3;
  if (has_port_number()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->port_number(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ClientMessage_UpdateServer::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string cookie = 1;
    if (has_cookie()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cookie());
    }

    // required string network_name = 2;
    if (has_network_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->network_name());
    }

    // required int32 port_number = 3;
    if (has_port_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->port_number());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClientMessage_UpdateServer::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ClientMessage_UpdateServer* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ClientMessage_UpdateServer*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ClientMessage_UpdateServer::MergeFrom(const ClientMessage_UpdateServer& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cookie()) {
      set_cookie(from.cookie());
    }
    if (from.has_network_name()) {
      set_network_name(from.network_name());
    }
    if (from.has_port_number()) {
      set_port_number(from.port_number());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ClientMessage_UpdateServer::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientMessage_UpdateServer::CopyFrom(const ClientMessage_UpdateServer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientMessage_UpdateServer::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void ClientMessage_UpdateServer::Swap(ClientMessage_UpdateServer* other) {
  if (other != this) {
    std::swap(cookie_, other->cookie_);
    std::swap(network_name_, other->network_name_);
    std::swap(port_number_, other->port_number_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ClientMessage_UpdateServer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClientMessage_UpdateServer_descriptor_;
  metadata.reflection = ClientMessage_UpdateServer_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int ClientMessage_StopServer::kCookieFieldNumber;
const int ClientMessage_StopServer::kNetworkNameFieldNumber;
#endif  // !_MSC_VER

ClientMessage_StopServer::ClientMessage_StopServer()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ClientMessage_StopServer::InitAsDefaultInstance() {
}

ClientMessage_StopServer::ClientMessage_StopServer(const ClientMessage_StopServer& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ClientMessage_StopServer::SharedCtor() {
  _cached_size_ = 0;
  cookie_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  network_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClientMessage_StopServer::~ClientMessage_StopServer() {
  SharedDtor();
}

void ClientMessage_StopServer::SharedDtor() {
  if (cookie_ != &::google::protobuf::internal::kEmptyString) {
    delete cookie_;
  }
  if (network_name_ != &::google::protobuf::internal::kEmptyString) {
    delete network_name_;
  }
  if (this != default_instance_) {
  }
}

void ClientMessage_StopServer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClientMessage_StopServer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClientMessage_StopServer_descriptor_;
}

const ClientMessage_StopServer& ClientMessage_StopServer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_sp2p_5fprotocol_2eproto();
  return *default_instance_;
}

ClientMessage_StopServer* ClientMessage_StopServer::default_instance_ = NULL;

ClientMessage_StopServer* ClientMessage_StopServer::New() const {
  return new ClientMessage_StopServer;
}

void ClientMessage_StopServer::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_cookie()) {
      if (cookie_ != &::google::protobuf::internal::kEmptyString) {
        cookie_->clear();
      }
    }
    if (has_network_name()) {
      if (network_name_ != &::google::protobuf::internal::kEmptyString) {
        network_name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ClientMessage_StopServer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string cookie = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cookie()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->cookie().data(), this->cookie().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_network_name;
        break;
      }

      // required string network_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_network_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_network_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->network_name().data(), this->network_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ClientMessage_StopServer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string cookie = 1;
  if (has_cookie()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cookie().data(), this->cookie().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->cookie(), output);
  }

  // required string network_name = 2;
  if (has_network_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->network_name().data(), this->network_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->network_name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ClientMessage_StopServer::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string cookie = 1;
  if (has_cookie()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cookie().data(), this->cookie().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->cookie(), target);
  }

  // required string network_name = 2;
  if (has_network_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->network_name().data(), this->network_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->network_name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ClientMessage_StopServer::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string cookie = 1;
    if (has_cookie()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cookie());
    }

    // required string network_name = 2;
    if (has_network_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->network_name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClientMessage_StopServer::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ClientMessage_StopServer* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ClientMessage_StopServer*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ClientMessage_StopServer::MergeFrom(const ClientMessage_StopServer& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cookie()) {
      set_cookie(from.cookie());
    }
    if (from.has_network_name()) {
      set_network_name(from.network_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ClientMessage_StopServer::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientMessage_StopServer::CopyFrom(const ClientMessage_StopServer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientMessage_StopServer::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void ClientMessage_StopServer::Swap(ClientMessage_StopServer* other) {
  if (other != this) {
    std::swap(cookie_, other->cookie_);
    std::swap(network_name_, other->network_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ClientMessage_StopServer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClientMessage_StopServer_descriptor_;
  metadata.reflection = ClientMessage_StopServer_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int ClientMessage_SignKey::kCookieFieldNumber;
const int ClientMessage_SignKey::kPublicKeyFieldNumber;
const int ClientMessage_SignKey::kNetworkNameFieldNumber;
#endif  // !_MSC_VER

ClientMessage_SignKey::ClientMessage_SignKey()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ClientMessage_SignKey::InitAsDefaultInstance() {
}

ClientMessage_SignKey::ClientMessage_SignKey(const ClientMessage_SignKey& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ClientMessage_SignKey::SharedCtor() {
  _cached_size_ = 0;
  cookie_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  public_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  network_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClientMessage_SignKey::~ClientMessage_SignKey() {
  SharedDtor();
}

void ClientMessage_SignKey::SharedDtor() {
  if (cookie_ != &::google::protobuf::internal::kEmptyString) {
    delete cookie_;
  }
  if (public_key_ != &::google::protobuf::internal::kEmptyString) {
    delete public_key_;
  }
  if (network_name_ != &::google::protobuf::internal::kEmptyString) {
    delete network_name_;
  }
  if (this != default_instance_) {
  }
}

void ClientMessage_SignKey::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClientMessage_SignKey::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClientMessage_SignKey_descriptor_;
}

const ClientMessage_SignKey& ClientMessage_SignKey::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_sp2p_5fprotocol_2eproto();
  return *default_instance_;
}

ClientMessage_SignKey* ClientMessage_SignKey::default_instance_ = NULL;

ClientMessage_SignKey* ClientMessage_SignKey::New() const {
  return new ClientMessage_SignKey;
}

void ClientMessage_SignKey::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_cookie()) {
      if (cookie_ != &::google::protobuf::internal::kEmptyString) {
        cookie_->clear();
      }
    }
    if (has_public_key()) {
      if (public_key_ != &::google::protobuf::internal::kEmptyString) {
        public_key_->clear();
      }
    }
    if (has_network_name()) {
      if (network_name_ != &::google::protobuf::internal::kEmptyString) {
        network_name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ClientMessage_SignKey::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string cookie = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cookie()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->cookie().data(), this->cookie().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_public_key;
        break;
      }

      // required string public_key = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_public_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_public_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->public_key().data(), this->public_key().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_network_name;
        break;
      }

      // optional string network_name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_network_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_network_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->network_name().data(), this->network_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ClientMessage_SignKey::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string cookie = 1;
  if (has_cookie()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cookie().data(), this->cookie().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->cookie(), output);
  }

  // required string public_key = 2;
  if (has_public_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->public_key().data(), this->public_key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->public_key(), output);
  }

  // optional string network_name = 3;
  if (has_network_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->network_name().data(), this->network_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->network_name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ClientMessage_SignKey::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string cookie = 1;
  if (has_cookie()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cookie().data(), this->cookie().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->cookie(), target);
  }

  // required string public_key = 2;
  if (has_public_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->public_key().data(), this->public_key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->public_key(), target);
  }

  // optional string network_name = 3;
  if (has_network_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->network_name().data(), this->network_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->network_name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ClientMessage_SignKey::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string cookie = 1;
    if (has_cookie()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cookie());
    }

    // required string public_key = 2;
    if (has_public_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->public_key());
    }

    // optional string network_name = 3;
    if (has_network_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->network_name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClientMessage_SignKey::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ClientMessage_SignKey* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ClientMessage_SignKey*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ClientMessage_SignKey::MergeFrom(const ClientMessage_SignKey& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cookie()) {
      set_cookie(from.cookie());
    }
    if (from.has_public_key()) {
      set_public_key(from.public_key());
    }
    if (from.has_network_name()) {
      set_network_name(from.network_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ClientMessage_SignKey::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientMessage_SignKey::CopyFrom(const ClientMessage_SignKey& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientMessage_SignKey::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void ClientMessage_SignKey::Swap(ClientMessage_SignKey* other) {
  if (other != this) {
    std::swap(cookie_, other->cookie_);
    std::swap(public_key_, other->public_key_);
    std::swap(network_name_, other->network_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ClientMessage_SignKey::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClientMessage_SignKey_descriptor_;
  metadata.reflection = ClientMessage_SignKey_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int ClientMessage::kRequestFieldNumber;
const int ClientMessage::kRegisterMessageFieldNumber;
const int ClientMessage::kUnregisterMessageFieldNumber;
const int ClientMessage::kLoginMessageFieldNumber;
const int ClientMessage::kLogoutMessageFieldNumber;
const int ClientMessage::kListNetworksMessageFieldNumber;
const int ClientMessage::kListMyNetworksMessageFieldNumber;
const int ClientMessage::kListServersMessageFieldNumber;
const int ClientMessage::kCreateNetworkMessageFieldNumber;
const int ClientMessage::kDeleteNetworkMessageFieldNumber;
const int ClientMessage::kInviteUserMessageFieldNumber;
const int ClientMessage::kRemoveUserMessageFieldNumber;
const int ClientMessage::kUserInfoMessageFieldNumber;
const int ClientMessage::kUpdateServerMessageFieldNumber;
const int ClientMessage::kStopServerMessageFieldNumber;
const int ClientMessage::kSignKeyMessageFieldNumber;
#endif  // !_MSC_VER

ClientMessage::ClientMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ClientMessage::InitAsDefaultInstance() {
  register_message_ = const_cast< ::ClientMessage_Register*>(&::ClientMessage_Register::default_instance());
  unregister_message_ = const_cast< ::ClientMessage_Unregister*>(&::ClientMessage_Unregister::default_instance());
  login_message_ = const_cast< ::ClientMessage_Login*>(&::ClientMessage_Login::default_instance());
  logout_message_ = const_cast< ::ClientMessage_Logout*>(&::ClientMessage_Logout::default_instance());
  list_networks_message_ = const_cast< ::ClientMessage_ListNetworks*>(&::ClientMessage_ListNetworks::default_instance());
  list_my_networks_message_ = const_cast< ::ClientMessage_ListMyNetworks*>(&::ClientMessage_ListMyNetworks::default_instance());
  list_servers_message_ = const_cast< ::ClientMessage_ListServers*>(&::ClientMessage_ListServers::default_instance());
  create_network_message_ = const_cast< ::ClientMessage_CreateNetwork*>(&::ClientMessage_CreateNetwork::default_instance());
  delete_network_message_ = const_cast< ::ClientMessage_DeleteNetwork*>(&::ClientMessage_DeleteNetwork::default_instance());
  invite_user_message_ = const_cast< ::ClientMessage_InviteUser*>(&::ClientMessage_InviteUser::default_instance());
  remove_user_message_ = const_cast< ::ClientMessage_RemoveUser*>(&::ClientMessage_RemoveUser::default_instance());
  user_info_message_ = const_cast< ::ClientMessage_UserInfo*>(&::ClientMessage_UserInfo::default_instance());
  update_server_message_ = const_cast< ::ClientMessage_UpdateServer*>(&::ClientMessage_UpdateServer::default_instance());
  stop_server_message_ = const_cast< ::ClientMessage_StopServer*>(&::ClientMessage_StopServer::default_instance());
  sign_key_message_ = const_cast< ::ClientMessage_SignKey*>(&::ClientMessage_SignKey::default_instance());
}

ClientMessage::ClientMessage(const ClientMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ClientMessage::SharedCtor() {
  _cached_size_ = 0;
  request_ = 0;
  register_message_ = NULL;
  unregister_message_ = NULL;
  login_message_ = NULL;
  logout_message_ = NULL;
  list_networks_message_ = NULL;
  list_my_networks_message_ = NULL;
  list_servers_message_ = NULL;
  create_network_message_ = NULL;
  delete_network_message_ = NULL;
  invite_user_message_ = NULL;
  remove_user_message_ = NULL;
  user_info_message_ = NULL;
  update_server_message_ = NULL;
  stop_server_message_ = NULL;
  sign_key_message_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClientMessage::~ClientMessage() {
  SharedDtor();
}

void ClientMessage::SharedDtor() {
  if (this != default_instance_) {
    delete register_message_;
    delete unregister_message_;
    delete login_message_;
    delete logout_message_;
    delete list_networks_message_;
    delete list_my_networks_message_;
    delete list_servers_message_;
    delete create_network_message_;
    delete delete_network_message_;
    delete invite_user_message_;
    delete remove_user_message_;
    delete user_info_message_;
    delete update_server_message_;
    delete stop_server_message_;
    delete sign_key_message_;
  }
}

void ClientMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClientMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClientMessage_descriptor_;
}

const ClientMessage& ClientMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_sp2p_5fprotocol_2eproto();
  return *default_instance_;
}

ClientMessage* ClientMessage::default_instance_ = NULL;

ClientMessage* ClientMessage::New() const {
  return new ClientMessage;
}

void ClientMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    request_ = 0;
    if (has_register_message()) {
      if (register_message_ != NULL) register_message_->::ClientMessage_Register::Clear();
    }
    if (has_unregister_message()) {
      if (unregister_message_ != NULL) unregister_message_->::ClientMessage_Unregister::Clear();
    }
    if (has_login_message()) {
      if (login_message_ != NULL) login_message_->::ClientMessage_Login::Clear();
    }
    if (has_logout_message()) {
      if (logout_message_ != NULL) logout_message_->::ClientMessage_Logout::Clear();
    }
    if (has_list_networks_message()) {
      if (list_networks_message_ != NULL) list_networks_message_->::ClientMessage_ListNetworks::Clear();
    }
    if (has_list_my_networks_message()) {
      if (list_my_networks_message_ != NULL) list_my_networks_message_->::ClientMessage_ListMyNetworks::Clear();
    }
    if (has_list_servers_message()) {
      if (list_servers_message_ != NULL) list_servers_message_->::ClientMessage_ListServers::Clear();
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_create_network_message()) {
      if (create_network_message_ != NULL) create_network_message_->::ClientMessage_CreateNetwork::Clear();
    }
    if (has_delete_network_message()) {
      if (delete_network_message_ != NULL) delete_network_message_->::ClientMessage_DeleteNetwork::Clear();
    }
    if (has_invite_user_message()) {
      if (invite_user_message_ != NULL) invite_user_message_->::ClientMessage_InviteUser::Clear();
    }
    if (has_remove_user_message()) {
      if (remove_user_message_ != NULL) remove_user_message_->::ClientMessage_RemoveUser::Clear();
    }
    if (has_user_info_message()) {
      if (user_info_message_ != NULL) user_info_message_->::ClientMessage_UserInfo::Clear();
    }
    if (has_update_server_message()) {
      if (update_server_message_ != NULL) update_server_message_->::ClientMessage_UpdateServer::Clear();
    }
    if (has_stop_server_message()) {
      if (stop_server_message_ != NULL) stop_server_message_->::ClientMessage_StopServer::Clear();
    }
    if (has_sign_key_message()) {
      if (sign_key_message_ != NULL) sign_key_message_->::ClientMessage_SignKey::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ClientMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .ClientMessage.RequestType request = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ClientMessage_RequestType_IsValid(value)) {
            set_request(static_cast< ::ClientMessage_RequestType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_register_message;
        break;
      }

      // optional .ClientMessage.Register register_message = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_register_message:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_register_message()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_unregister_message;
        break;
      }

      // optional .ClientMessage.Unregister unregister_message = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_unregister_message:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_unregister_message()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_login_message;
        break;
      }

      // optional .ClientMessage.Login login_message = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_login_message:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_login_message()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_logout_message;
        break;
      }

      // optional .ClientMessage.Logout logout_message = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_logout_message:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_logout_message()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_list_networks_message;
        break;
      }

      // optional .ClientMessage.ListNetworks list_networks_message = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_list_networks_message:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_list_networks_message()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_list_my_networks_message;
        break;
      }

      // optional .ClientMessage.ListMyNetworks list_my_networks_message = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_list_my_networks_message:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_list_my_networks_message()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_list_servers_message;
        break;
      }

      // optional .ClientMessage.ListServers list_servers_message = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_list_servers_message:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_list_servers_message()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_create_network_message;
        break;
      }

      // optional .ClientMessage.CreateNetwork create_network_message = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_create_network_message:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_create_network_message()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_delete_network_message;
        break;
      }

      // optional .ClientMessage.DeleteNetwork delete_network_message = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_delete_network_message:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_delete_network_message()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_invite_user_message;
        break;
      }

      // optional .ClientMessage.InviteUser invite_user_message = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_invite_user_message:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_invite_user_message()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_remove_user_message;
        break;
      }

      // optional .ClientMessage.RemoveUser remove_user_message = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_remove_user_message:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_remove_user_message()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_user_info_message;
        break;
      }

      // optional .ClientMessage.UserInfo user_info_message = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user_info_message:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_user_info_message()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_update_server_message;
        break;
      }

      // optional .ClientMessage.UpdateServer update_server_message = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_update_server_message:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_update_server_message()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_stop_server_message;
        break;
      }

      // optional .ClientMessage.StopServer stop_server_message = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stop_server_message:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stop_server_message()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(130)) goto parse_sign_key_message;
        break;
      }

      // optional .ClientMessage.SignKey sign_key_message = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sign_key_message:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sign_key_message()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ClientMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .ClientMessage.RequestType request = 1;
  if (has_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->request(), output);
  }

  // optional .ClientMessage.Register register_message = 2;
  if (has_register_message()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->register_message(), output);
  }

  // optional .ClientMessage.Unregister unregister_message = 3;
  if (has_unregister_message()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->unregister_message(), output);
  }

  // optional .ClientMessage.Login login_message = 4;
  if (has_login_message()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->login_message(), output);
  }

  // optional .ClientMessage.Logout logout_message = 5;
  if (has_logout_message()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->logout_message(), output);
  }

  // optional .ClientMessage.ListNetworks list_networks_message = 6;
  if (has_list_networks_message()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->list_networks_message(), output);
  }

  // optional .ClientMessage.ListMyNetworks list_my_networks_message = 7;
  if (has_list_my_networks_message()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->list_my_networks_message(), output);
  }

  // optional .ClientMessage.ListServers list_servers_message = 8;
  if (has_list_servers_message()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->list_servers_message(), output);
  }

  // optional .ClientMessage.CreateNetwork create_network_message = 9;
  if (has_create_network_message()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->create_network_message(), output);
  }

  // optional .ClientMessage.DeleteNetwork delete_network_message = 10;
  if (has_delete_network_message()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->delete_network_message(), output);
  }

  // optional .ClientMessage.InviteUser invite_user_message = 11;
  if (has_invite_user_message()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->invite_user_message(), output);
  }

  // optional .ClientMessage.RemoveUser remove_user_message = 12;
  if (has_remove_user_message()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->remove_user_message(), output);
  }

  // optional .ClientMessage.UserInfo user_info_message = 13;
  if (has_user_info_message()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->user_info_message(), output);
  }

  // optional .ClientMessage.UpdateServer update_server_message = 14;
  if (has_update_server_message()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->update_server_message(), output);
  }

  // optional .ClientMessage.StopServer stop_server_message = 15;
  if (has_stop_server_message()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, this->stop_server_message(), output);
  }

  // optional .ClientMessage.SignKey sign_key_message = 16;
  if (has_sign_key_message()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, this->sign_key_message(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ClientMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .ClientMessage.RequestType request = 1;
  if (has_request()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->request(), target);
  }

  // optional .ClientMessage.Register register_message = 2;
  if (has_register_message()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->register_message(), target);
  }

  // optional .ClientMessage.Unregister unregister_message = 3;
  if (has_unregister_message()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->unregister_message(), target);
  }

  // optional .ClientMessage.Login login_message = 4;
  if (has_login_message()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->login_message(), target);
  }

  // optional .ClientMessage.Logout logout_message = 5;
  if (has_logout_message()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->logout_message(), target);
  }

  // optional .ClientMessage.ListNetworks list_networks_message = 6;
  if (has_list_networks_message()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->list_networks_message(), target);
  }

  // optional .ClientMessage.ListMyNetworks list_my_networks_message = 7;
  if (has_list_my_networks_message()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->list_my_networks_message(), target);
  }

  // optional .ClientMessage.ListServers list_servers_message = 8;
  if (has_list_servers_message()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->list_servers_message(), target);
  }

  // optional .ClientMessage.CreateNetwork create_network_message = 9;
  if (has_create_network_message()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->create_network_message(), target);
  }

  // optional .ClientMessage.DeleteNetwork delete_network_message = 10;
  if (has_delete_network_message()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->delete_network_message(), target);
  }

  // optional .ClientMessage.InviteUser invite_user_message = 11;
  if (has_invite_user_message()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->invite_user_message(), target);
  }

  // optional .ClientMessage.RemoveUser remove_user_message = 12;
  if (has_remove_user_message()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->remove_user_message(), target);
  }

  // optional .ClientMessage.UserInfo user_info_message = 13;
  if (has_user_info_message()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->user_info_message(), target);
  }

  // optional .ClientMessage.UpdateServer update_server_message = 14;
  if (has_update_server_message()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        14, this->update_server_message(), target);
  }

  // optional .ClientMessage.StopServer stop_server_message = 15;
  if (has_stop_server_message()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        15, this->stop_server_message(), target);
  }

  // optional .ClientMessage.SignKey sign_key_message = 16;
  if (has_sign_key_message()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        16, this->sign_key_message(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ClientMessage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .ClientMessage.RequestType request = 1;
    if (has_request()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->request());
    }

    // optional .ClientMessage.Register register_message = 2;
    if (has_register_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->register_message());
    }

    // optional .ClientMessage.Unregister unregister_message = 3;
    if (has_unregister_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->unregister_message());
    }

    // optional .ClientMessage.Login login_message = 4;
    if (has_login_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->login_message());
    }

    // optional .ClientMessage.Logout logout_message = 5;
    if (has_logout_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->logout_message());
    }

    // optional .ClientMessage.ListNetworks list_networks_message = 6;
    if (has_list_networks_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->list_networks_message());
    }

    // optional .ClientMessage.ListMyNetworks list_my_networks_message = 7;
    if (has_list_my_networks_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->list_my_networks_message());
    }

    // optional .ClientMessage.ListServers list_servers_message = 8;
    if (has_list_servers_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->list_servers_message());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .ClientMessage.CreateNetwork create_network_message = 9;
    if (has_create_network_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->create_network_message());
    }

    // optional .ClientMessage.DeleteNetwork delete_network_message = 10;
    if (has_delete_network_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->delete_network_message());
    }

    // optional .ClientMessage.InviteUser invite_user_message = 11;
    if (has_invite_user_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->invite_user_message());
    }

    // optional .ClientMessage.RemoveUser remove_user_message = 12;
    if (has_remove_user_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->remove_user_message());
    }

    // optional .ClientMessage.UserInfo user_info_message = 13;
    if (has_user_info_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->user_info_message());
    }

    // optional .ClientMessage.UpdateServer update_server_message = 14;
    if (has_update_server_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->update_server_message());
    }

    // optional .ClientMessage.StopServer stop_server_message = 15;
    if (has_stop_server_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->stop_server_message());
    }

    // optional .ClientMessage.SignKey sign_key_message = 16;
    if (has_sign_key_message()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->sign_key_message());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClientMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ClientMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ClientMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ClientMessage::MergeFrom(const ClientMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_request()) {
      set_request(from.request());
    }
    if (from.has_register_message()) {
      mutable_register_message()->::ClientMessage_Register::MergeFrom(from.register_message());
    }
    if (from.has_unregister_message()) {
      mutable_unregister_message()->::ClientMessage_Unregister::MergeFrom(from.unregister_message());
    }
    if (from.has_login_message()) {
      mutable_login_message()->::ClientMessage_Login::MergeFrom(from.login_message());
    }
    if (from.has_logout_message()) {
      mutable_logout_message()->::ClientMessage_Logout::MergeFrom(from.logout_message());
    }
    if (from.has_list_networks_message()) {
      mutable_list_networks_message()->::ClientMessage_ListNetworks::MergeFrom(from.list_networks_message());
    }
    if (from.has_list_my_networks_message()) {
      mutable_list_my_networks_message()->::ClientMessage_ListMyNetworks::MergeFrom(from.list_my_networks_message());
    }
    if (from.has_list_servers_message()) {
      mutable_list_servers_message()->::ClientMessage_ListServers::MergeFrom(from.list_servers_message());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_create_network_message()) {
      mutable_create_network_message()->::ClientMessage_CreateNetwork::MergeFrom(from.create_network_message());
    }
    if (from.has_delete_network_message()) {
      mutable_delete_network_message()->::ClientMessage_DeleteNetwork::MergeFrom(from.delete_network_message());
    }
    if (from.has_invite_user_message()) {
      mutable_invite_user_message()->::ClientMessage_InviteUser::MergeFrom(from.invite_user_message());
    }
    if (from.has_remove_user_message()) {
      mutable_remove_user_message()->::ClientMessage_RemoveUser::MergeFrom(from.remove_user_message());
    }
    if (from.has_user_info_message()) {
      mutable_user_info_message()->::ClientMessage_UserInfo::MergeFrom(from.user_info_message());
    }
    if (from.has_update_server_message()) {
      mutable_update_server_message()->::ClientMessage_UpdateServer::MergeFrom(from.update_server_message());
    }
    if (from.has_stop_server_message()) {
      mutable_stop_server_message()->::ClientMessage_StopServer::MergeFrom(from.stop_server_message());
    }
    if (from.has_sign_key_message()) {
      mutable_sign_key_message()->::ClientMessage_SignKey::MergeFrom(from.sign_key_message());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ClientMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientMessage::CopyFrom(const ClientMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_register_message()) {
    if (!this->register_message().IsInitialized()) return false;
  }
  if (has_unregister_message()) {
    if (!this->unregister_message().IsInitialized()) return false;
  }
  if (has_login_message()) {
    if (!this->login_message().IsInitialized()) return false;
  }
  if (has_logout_message()) {
    if (!this->logout_message().IsInitialized()) return false;
  }
  if (has_list_networks_message()) {
    if (!this->list_networks_message().IsInitialized()) return false;
  }
  if (has_list_my_networks_message()) {
    if (!this->list_my_networks_message().IsInitialized()) return false;
  }
  if (has_list_servers_message()) {
    if (!this->list_servers_message().IsInitialized()) return false;
  }
  if (has_create_network_message()) {
    if (!this->create_network_message().IsInitialized()) return false;
  }
  if (has_delete_network_message()) {
    if (!this->delete_network_message().IsInitialized()) return false;
  }
  if (has_invite_user_message()) {
    if (!this->invite_user_message().IsInitialized()) return false;
  }
  if (has_remove_user_message()) {
    if (!this->remove_user_message().IsInitialized()) return false;
  }
  if (has_user_info_message()) {
    if (!this->user_info_message().IsInitialized()) return false;
  }
  if (has_update_server_message()) {
    if (!this->update_server_message().IsInitialized()) return false;
  }
  if (has_stop_server_message()) {
    if (!this->stop_server_message().IsInitialized()) return false;
  }
  if (has_sign_key_message()) {
    if (!this->sign_key_message().IsInitialized()) return false;
  }
  return true;
}

void ClientMessage::Swap(ClientMessage* other) {
  if (other != this) {
    std::swap(request_, other->request_);
    std::swap(register_message_, other->register_message_);
    std::swap(unregister_message_, other->unregister_message_);
    std::swap(login_message_, other->login_message_);
    std::swap(logout_message_, other->logout_message_);
    std::swap(list_networks_message_, other->list_networks_message_);
    std::swap(list_my_networks_message_, other->list_my_networks_message_);
    std::swap(list_servers_message_, other->list_servers_message_);
    std::swap(create_network_message_, other->create_network_message_);
    std::swap(delete_network_message_, other->delete_network_message_);
    std::swap(invite_user_message_, other->invite_user_message_);
    std::swap(remove_user_message_, other->remove_user_message_);
    std::swap(user_info_message_, other->user_info_message_);
    std::swap(update_server_message_, other->update_server_message_);
    std::swap(stop_server_message_, other->stop_server_message_);
    std::swap(sign_key_message_, other->sign_key_message_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ClientMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClientMessage_descriptor_;
  metadata.reflection = ClientMessage_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* NodeMessage_ResponseType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NodeMessage_ResponseType_descriptor_;
}
bool NodeMessage_ResponseType_IsValid(int value) {
  switch(value) {
    case 200:
    case 400:
    case 500:
    case 501:
    case 502:
    case 503:
    case 504:
    case 505:
    case 506:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const NodeMessage_ResponseType NodeMessage::OK;
const NodeMessage_ResponseType NodeMessage::INTERNAL_SERVER_ERROR;
const NodeMessage_ResponseType NodeMessage::BAD_REQUEST;
const NodeMessage_ResponseType NodeMessage::NO_PRIVILAGES;
const NodeMessage_ResponseType NodeMessage::NOT_LOGGED;
const NodeMessage_ResponseType NodeMessage::BAD_CREDENTIALS;
const NodeMessage_ResponseType NodeMessage::NO_SUCH_USER;
const NodeMessage_ResponseType NodeMessage::NO_SUCH_NETWORK;
const NodeMessage_ResponseType NodeMessage::BAD_DATA;
const NodeMessage_ResponseType NodeMessage::ResponseType_MIN;
const NodeMessage_ResponseType NodeMessage::ResponseType_MAX;
const int NodeMessage::ResponseType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int NodeMessage_Register::kUserCertificateFieldNumber;
const int NodeMessage_Register::kNodeCertificateFieldNumber;
#endif  // !_MSC_VER

NodeMessage_Register::NodeMessage_Register()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NodeMessage_Register::InitAsDefaultInstance() {
}

NodeMessage_Register::NodeMessage_Register(const NodeMessage_Register& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NodeMessage_Register::SharedCtor() {
  _cached_size_ = 0;
  user_certificate_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  node_certificate_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NodeMessage_Register::~NodeMessage_Register() {
  SharedDtor();
}

void NodeMessage_Register::SharedDtor() {
  if (user_certificate_ != &::google::protobuf::internal::kEmptyString) {
    delete user_certificate_;
  }
  if (node_certificate_ != &::google::protobuf::internal::kEmptyString) {
    delete node_certificate_;
  }
  if (this != default_instance_) {
  }
}

void NodeMessage_Register::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NodeMessage_Register::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NodeMessage_Register_descriptor_;
}

const NodeMessage_Register& NodeMessage_Register::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_sp2p_5fprotocol_2eproto();
  return *default_instance_;
}

NodeMessage_Register* NodeMessage_Register::default_instance_ = NULL;

NodeMessage_Register* NodeMessage_Register::New() const {
  return new NodeMessage_Register;
}

void NodeMessage_Register::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_user_certificate()) {
      if (user_certificate_ != &::google::protobuf::internal::kEmptyString) {
        user_certificate_->clear();
      }
    }
    if (has_node_certificate()) {
      if (node_certificate_ != &::google::protobuf::internal::kEmptyString) {
        node_certificate_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NodeMessage_Register::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string user_certificate = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_certificate()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->user_certificate().data(), this->user_certificate().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_node_certificate;
        break;
      }

      // required string node_certificate = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_node_certificate:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_node_certificate()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->node_certificate().data(), this->node_certificate().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NodeMessage_Register::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string user_certificate = 1;
  if (has_user_certificate()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user_certificate().data(), this->user_certificate().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->user_certificate(), output);
  }

  // required string node_certificate = 2;
  if (has_node_certificate()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->node_certificate().data(), this->node_certificate().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->node_certificate(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NodeMessage_Register::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string user_certificate = 1;
  if (has_user_certificate()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user_certificate().data(), this->user_certificate().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->user_certificate(), target);
  }

  // required string node_certificate = 2;
  if (has_node_certificate()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->node_certificate().data(), this->node_certificate().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->node_certificate(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NodeMessage_Register::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string user_certificate = 1;
    if (has_user_certificate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->user_certificate());
    }

    // required string node_certificate = 2;
    if (has_node_certificate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->node_certificate());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NodeMessage_Register::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NodeMessage_Register* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NodeMessage_Register*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NodeMessage_Register::MergeFrom(const NodeMessage_Register& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_certificate()) {
      set_user_certificate(from.user_certificate());
    }
    if (from.has_node_certificate()) {
      set_node_certificate(from.node_certificate());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NodeMessage_Register::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NodeMessage_Register::CopyFrom(const NodeMessage_Register& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NodeMessage_Register::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void NodeMessage_Register::Swap(NodeMessage_Register* other) {
  if (other != this) {
    std::swap(user_certificate_, other->user_certificate_);
    std::swap(node_certificate_, other->node_certificate_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NodeMessage_Register::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NodeMessage_Register_descriptor_;
  metadata.reflection = NodeMessage_Register_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int NodeMessage_Login::kCookieFieldNumber;
const int NodeMessage_Login::kNodeCertificateFieldNumber;
#endif  // !_MSC_VER

NodeMessage_Login::NodeMessage_Login()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NodeMessage_Login::InitAsDefaultInstance() {
}

NodeMessage_Login::NodeMessage_Login(const NodeMessage_Login& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NodeMessage_Login::SharedCtor() {
  _cached_size_ = 0;
  cookie_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  node_certificate_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NodeMessage_Login::~NodeMessage_Login() {
  SharedDtor();
}

void NodeMessage_Login::SharedDtor() {
  if (cookie_ != &::google::protobuf::internal::kEmptyString) {
    delete cookie_;
  }
  if (node_certificate_ != &::google::protobuf::internal::kEmptyString) {
    delete node_certificate_;
  }
  if (this != default_instance_) {
  }
}

void NodeMessage_Login::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NodeMessage_Login::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NodeMessage_Login_descriptor_;
}

const NodeMessage_Login& NodeMessage_Login::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_sp2p_5fprotocol_2eproto();
  return *default_instance_;
}

NodeMessage_Login* NodeMessage_Login::default_instance_ = NULL;

NodeMessage_Login* NodeMessage_Login::New() const {
  return new NodeMessage_Login;
}

void NodeMessage_Login::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_cookie()) {
      if (cookie_ != &::google::protobuf::internal::kEmptyString) {
        cookie_->clear();
      }
    }
    if (has_node_certificate()) {
      if (node_certificate_ != &::google::protobuf::internal::kEmptyString) {
        node_certificate_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NodeMessage_Login::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string cookie = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cookie()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->cookie().data(), this->cookie().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_node_certificate;
        break;
      }

      // optional string node_certificate = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_node_certificate:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_node_certificate()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->node_certificate().data(), this->node_certificate().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NodeMessage_Login::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string cookie = 1;
  if (has_cookie()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cookie().data(), this->cookie().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->cookie(), output);
  }

  // optional string node_certificate = 2;
  if (has_node_certificate()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->node_certificate().data(), this->node_certificate().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->node_certificate(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NodeMessage_Login::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string cookie = 1;
  if (has_cookie()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cookie().data(), this->cookie().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->cookie(), target);
  }

  // optional string node_certificate = 2;
  if (has_node_certificate()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->node_certificate().data(), this->node_certificate().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->node_certificate(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NodeMessage_Login::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string cookie = 1;
    if (has_cookie()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cookie());
    }

    // optional string node_certificate = 2;
    if (has_node_certificate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->node_certificate());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NodeMessage_Login::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NodeMessage_Login* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NodeMessage_Login*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NodeMessage_Login::MergeFrom(const NodeMessage_Login& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cookie()) {
      set_cookie(from.cookie());
    }
    if (from.has_node_certificate()) {
      set_node_certificate(from.node_certificate());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NodeMessage_Login::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NodeMessage_Login::CopyFrom(const NodeMessage_Login& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NodeMessage_Login::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void NodeMessage_Login::Swap(NodeMessage_Login* other) {
  if (other != this) {
    std::swap(cookie_, other->cookie_);
    std::swap(node_certificate_, other->node_certificate_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NodeMessage_Login::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NodeMessage_Login_descriptor_;
  metadata.reflection = NodeMessage_Login_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int NodeMessage_ListNetworks_Network::kNameFieldNumber;
const int NodeMessage_ListNetworks_Network::kCreatorNameFieldNumber;
const int NodeMessage_ListNetworks_Network::kCreatorEmailFieldNumber;
const int NodeMessage_ListNetworks_Network::kAccessRightsFieldNumber;
const int NodeMessage_ListNetworks_Network::kParticipationRightsFieldNumber;
const int NodeMessage_ListNetworks_Network::kProtocolNameFieldNumber;
#endif  // !_MSC_VER

NodeMessage_ListNetworks_Network::NodeMessage_ListNetworks_Network()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NodeMessage_ListNetworks_Network::InitAsDefaultInstance() {
}

NodeMessage_ListNetworks_Network::NodeMessage_ListNetworks_Network(const NodeMessage_ListNetworks_Network& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NodeMessage_ListNetworks_Network::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  creator_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  creator_email_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  access_rights_ = 1;
  participation_rights_ = 5;
  protocol_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NodeMessage_ListNetworks_Network::~NodeMessage_ListNetworks_Network() {
  SharedDtor();
}

void NodeMessage_ListNetworks_Network::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (creator_name_ != &::google::protobuf::internal::kEmptyString) {
    delete creator_name_;
  }
  if (creator_email_ != &::google::protobuf::internal::kEmptyString) {
    delete creator_email_;
  }
  if (protocol_name_ != &::google::protobuf::internal::kEmptyString) {
    delete protocol_name_;
  }
  if (this != default_instance_) {
  }
}

void NodeMessage_ListNetworks_Network::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NodeMessage_ListNetworks_Network::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NodeMessage_ListNetworks_Network_descriptor_;
}

const NodeMessage_ListNetworks_Network& NodeMessage_ListNetworks_Network::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_sp2p_5fprotocol_2eproto();
  return *default_instance_;
}

NodeMessage_ListNetworks_Network* NodeMessage_ListNetworks_Network::default_instance_ = NULL;

NodeMessage_ListNetworks_Network* NodeMessage_ListNetworks_Network::New() const {
  return new NodeMessage_ListNetworks_Network;
}

void NodeMessage_ListNetworks_Network::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_creator_name()) {
      if (creator_name_ != &::google::protobuf::internal::kEmptyString) {
        creator_name_->clear();
      }
    }
    if (has_creator_email()) {
      if (creator_email_ != &::google::protobuf::internal::kEmptyString) {
        creator_email_->clear();
      }
    }
    access_rights_ = 1;
    participation_rights_ = 5;
    if (has_protocol_name()) {
      if (protocol_name_ != &::google::protobuf::internal::kEmptyString) {
        protocol_name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NodeMessage_ListNetworks_Network::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_creator_name;
        break;
      }

      // required string creator_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_creator_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_creator_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->creator_name().data(), this->creator_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_creator_email;
        break;
      }

      // optional string creator_email = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_creator_email:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_creator_email()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->creator_email().data(), this->creator_email().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_access_rights;
        break;
      }

      // required .ClientMessage.CreateNetwork.AccessRights access_rights = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_access_rights:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ClientMessage_CreateNetwork_AccessRights_IsValid(value)) {
            set_access_rights(static_cast< ::ClientMessage_CreateNetwork_AccessRights >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_participation_rights;
        break;
      }

      // required .ClientMessage.CreateNetwork.ParticipationRights participation_rights = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_participation_rights:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ClientMessage_CreateNetwork_ParticipationRights_IsValid(value)) {
            set_participation_rights(static_cast< ::ClientMessage_CreateNetwork_ParticipationRights >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_protocol_name;
        break;
      }

      // optional string protocol_name = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_protocol_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_protocol_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->protocol_name().data(), this->protocol_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NodeMessage_ListNetworks_Network::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  // required string creator_name = 2;
  if (has_creator_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->creator_name().data(), this->creator_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->creator_name(), output);
  }

  // optional string creator_email = 3;
  if (has_creator_email()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->creator_email().data(), this->creator_email().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->creator_email(), output);
  }

  // required .ClientMessage.CreateNetwork.AccessRights access_rights = 4;
  if (has_access_rights()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->access_rights(), output);
  }

  // required .ClientMessage.CreateNetwork.ParticipationRights participation_rights = 5;
  if (has_participation_rights()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->participation_rights(), output);
  }

  // optional string protocol_name = 6;
  if (has_protocol_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->protocol_name().data(), this->protocol_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->protocol_name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NodeMessage_ListNetworks_Network::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // required string creator_name = 2;
  if (has_creator_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->creator_name().data(), this->creator_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->creator_name(), target);
  }

  // optional string creator_email = 3;
  if (has_creator_email()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->creator_email().data(), this->creator_email().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->creator_email(), target);
  }

  // required .ClientMessage.CreateNetwork.AccessRights access_rights = 4;
  if (has_access_rights()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->access_rights(), target);
  }

  // required .ClientMessage.CreateNetwork.ParticipationRights participation_rights = 5;
  if (has_participation_rights()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->participation_rights(), target);
  }

  // optional string protocol_name = 6;
  if (has_protocol_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->protocol_name().data(), this->protocol_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->protocol_name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NodeMessage_ListNetworks_Network::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required string creator_name = 2;
    if (has_creator_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->creator_name());
    }

    // optional string creator_email = 3;
    if (has_creator_email()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->creator_email());
    }

    // required .ClientMessage.CreateNetwork.AccessRights access_rights = 4;
    if (has_access_rights()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->access_rights());
    }

    // required .ClientMessage.CreateNetwork.ParticipationRights participation_rights = 5;
    if (has_participation_rights()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->participation_rights());
    }

    // optional string protocol_name = 6;
    if (has_protocol_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->protocol_name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NodeMessage_ListNetworks_Network::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NodeMessage_ListNetworks_Network* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NodeMessage_ListNetworks_Network*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NodeMessage_ListNetworks_Network::MergeFrom(const NodeMessage_ListNetworks_Network& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_creator_name()) {
      set_creator_name(from.creator_name());
    }
    if (from.has_creator_email()) {
      set_creator_email(from.creator_email());
    }
    if (from.has_access_rights()) {
      set_access_rights(from.access_rights());
    }
    if (from.has_participation_rights()) {
      set_participation_rights(from.participation_rights());
    }
    if (from.has_protocol_name()) {
      set_protocol_name(from.protocol_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NodeMessage_ListNetworks_Network::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NodeMessage_ListNetworks_Network::CopyFrom(const NodeMessage_ListNetworks_Network& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NodeMessage_ListNetworks_Network::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001b) != 0x0000001b) return false;

  return true;
}

void NodeMessage_ListNetworks_Network::Swap(NodeMessage_ListNetworks_Network* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(creator_name_, other->creator_name_);
    std::swap(creator_email_, other->creator_email_);
    std::swap(access_rights_, other->access_rights_);
    std::swap(participation_rights_, other->participation_rights_);
    std::swap(protocol_name_, other->protocol_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NodeMessage_ListNetworks_Network::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NodeMessage_ListNetworks_Network_descriptor_;
  metadata.reflection = NodeMessage_ListNetworks_Network_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int NodeMessage_ListNetworks::kNetworkListFieldNumber;
#endif  // !_MSC_VER

NodeMessage_ListNetworks::NodeMessage_ListNetworks()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NodeMessage_ListNetworks::InitAsDefaultInstance() {
}

NodeMessage_ListNetworks::NodeMessage_ListNetworks(const NodeMessage_ListNetworks& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NodeMessage_ListNetworks::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NodeMessage_ListNetworks::~NodeMessage_ListNetworks() {
  SharedDtor();
}

void NodeMessage_ListNetworks::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NodeMessage_ListNetworks::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NodeMessage_ListNetworks::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NodeMessage_ListNetworks_descriptor_;
}

const NodeMessage_ListNetworks& NodeMessage_ListNetworks::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_sp2p_5fprotocol_2eproto();
  return *default_instance_;
}

NodeMessage_ListNetworks* NodeMessage_ListNetworks::default_instance_ = NULL;

NodeMessage_ListNetworks* NodeMessage_ListNetworks::New() const {
  return new NodeMessage_ListNetworks;
}

void NodeMessage_ListNetworks::Clear() {
  network_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NodeMessage_ListNetworks::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .NodeMessage.ListNetworks.Network network_list = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_network_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_network_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_network_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NodeMessage_ListNetworks::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .NodeMessage.ListNetworks.Network network_list = 1;
  for (int i = 0; i < this->network_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->network_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NodeMessage_ListNetworks::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .NodeMessage.ListNetworks.Network network_list = 1;
  for (int i = 0; i < this->network_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->network_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NodeMessage_ListNetworks::ByteSize() const {
  int total_size = 0;

  // repeated .NodeMessage.ListNetworks.Network network_list = 1;
  total_size += 1 * this->network_list_size();
  for (int i = 0; i < this->network_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->network_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NodeMessage_ListNetworks::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NodeMessage_ListNetworks* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NodeMessage_ListNetworks*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NodeMessage_ListNetworks::MergeFrom(const NodeMessage_ListNetworks& from) {
  GOOGLE_CHECK_NE(&from, this);
  network_list_.MergeFrom(from.network_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NodeMessage_ListNetworks::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NodeMessage_ListNetworks::CopyFrom(const NodeMessage_ListNetworks& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NodeMessage_ListNetworks::IsInitialized() const {

  for (int i = 0; i < network_list_size(); i++) {
    if (!this->network_list(i).IsInitialized()) return false;
  }
  return true;
}

void NodeMessage_ListNetworks::Swap(NodeMessage_ListNetworks* other) {
  if (other != this) {
    network_list_.Swap(&other->network_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NodeMessage_ListNetworks::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NodeMessage_ListNetworks_descriptor_;
  metadata.reflection = NodeMessage_ListNetworks_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int NodeMessage_ListMyNetworks::kNetworkListFieldNumber;
#endif  // !_MSC_VER

NodeMessage_ListMyNetworks::NodeMessage_ListMyNetworks()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NodeMessage_ListMyNetworks::InitAsDefaultInstance() {
}

NodeMessage_ListMyNetworks::NodeMessage_ListMyNetworks(const NodeMessage_ListMyNetworks& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NodeMessage_ListMyNetworks::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NodeMessage_ListMyNetworks::~NodeMessage_ListMyNetworks() {
  SharedDtor();
}

void NodeMessage_ListMyNetworks::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NodeMessage_ListMyNetworks::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NodeMessage_ListMyNetworks::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NodeMessage_ListMyNetworks_descriptor_;
}

const NodeMessage_ListMyNetworks& NodeMessage_ListMyNetworks::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_sp2p_5fprotocol_2eproto();
  return *default_instance_;
}

NodeMessage_ListMyNetworks* NodeMessage_ListMyNetworks::default_instance_ = NULL;

NodeMessage_ListMyNetworks* NodeMessage_ListMyNetworks::New() const {
  return new NodeMessage_ListMyNetworks;
}

void NodeMessage_ListMyNetworks::Clear() {
  network_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NodeMessage_ListMyNetworks::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .NodeMessage.ListNetworks.Network network_list = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_network_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_network_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_network_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NodeMessage_ListMyNetworks::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .NodeMessage.ListNetworks.Network network_list = 1;
  for (int i = 0; i < this->network_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->network_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NodeMessage_ListMyNetworks::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .NodeMessage.ListNetworks.Network network_list = 1;
  for (int i = 0; i < this->network_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->network_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NodeMessage_ListMyNetworks::ByteSize() const {
  int total_size = 0;

  // repeated .NodeMessage.ListNetworks.Network network_list = 1;
  total_size += 1 * this->network_list_size();
  for (int i = 0; i < this->network_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->network_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NodeMessage_ListMyNetworks::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NodeMessage_ListMyNetworks* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NodeMessage_ListMyNetworks*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NodeMessage_ListMyNetworks::MergeFrom(const NodeMessage_ListMyNetworks& from) {
  GOOGLE_CHECK_NE(&from, this);
  network_list_.MergeFrom(from.network_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NodeMessage_ListMyNetworks::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NodeMessage_ListMyNetworks::CopyFrom(const NodeMessage_ListMyNetworks& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NodeMessage_ListMyNetworks::IsInitialized() const {

  for (int i = 0; i < network_list_size(); i++) {
    if (!this->network_list(i).IsInitialized()) return false;
  }
  return true;
}

void NodeMessage_ListMyNetworks::Swap(NodeMessage_ListMyNetworks* other) {
  if (other != this) {
    network_list_.Swap(&other->network_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NodeMessage_ListMyNetworks::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NodeMessage_ListMyNetworks_descriptor_;
  metadata.reflection = NodeMessage_ListMyNetworks_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int NodeMessage_ListServers_Server::kUsernameFieldNumber;
const int NodeMessage_ListServers_Server::kIpAddressFieldNumber;
const int NodeMessage_ListServers_Server::kPortNumberFieldNumber;
#endif  // !_MSC_VER

NodeMessage_ListServers_Server::NodeMessage_ListServers_Server()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NodeMessage_ListServers_Server::InitAsDefaultInstance() {
}

NodeMessage_ListServers_Server::NodeMessage_ListServers_Server(const NodeMessage_ListServers_Server& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NodeMessage_ListServers_Server::SharedCtor() {
  _cached_size_ = 0;
  username_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ip_address_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  port_number_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NodeMessage_ListServers_Server::~NodeMessage_ListServers_Server() {
  SharedDtor();
}

void NodeMessage_ListServers_Server::SharedDtor() {
  if (username_ != &::google::protobuf::internal::kEmptyString) {
    delete username_;
  }
  if (ip_address_ != &::google::protobuf::internal::kEmptyString) {
    delete ip_address_;
  }
  if (this != default_instance_) {
  }
}

void NodeMessage_ListServers_Server::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NodeMessage_ListServers_Server::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NodeMessage_ListServers_Server_descriptor_;
}

const NodeMessage_ListServers_Server& NodeMessage_ListServers_Server::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_sp2p_5fprotocol_2eproto();
  return *default_instance_;
}

NodeMessage_ListServers_Server* NodeMessage_ListServers_Server::default_instance_ = NULL;

NodeMessage_ListServers_Server* NodeMessage_ListServers_Server::New() const {
  return new NodeMessage_ListServers_Server;
}

void NodeMessage_ListServers_Server::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_username()) {
      if (username_ != &::google::protobuf::internal::kEmptyString) {
        username_->clear();
      }
    }
    if (has_ip_address()) {
      if (ip_address_ != &::google::protobuf::internal::kEmptyString) {
        ip_address_->clear();
      }
    }
    port_number_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NodeMessage_ListServers_Server::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string username = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_username()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->username().data(), this->username().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_ip_address;
        break;
      }

      // required string ip_address = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ip_address:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip_address()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ip_address().data(), this->ip_address().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_port_number;
        break;
      }

      // required int32 port_number = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_port_number:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &port_number_)));
          set_has_port_number();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NodeMessage_ListServers_Server::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string username = 1;
  if (has_username()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->username(), output);
  }

  // required string ip_address = 2;
  if (has_ip_address()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip_address().data(), this->ip_address().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->ip_address(), output);
  }

  // required int32 port_number = 3;
  if (has_port_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->port_number(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NodeMessage_ListServers_Server::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string username = 1;
  if (has_username()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->username(), target);
  }

  // required string ip_address = 2;
  if (has_ip_address()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip_address().data(), this->ip_address().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->ip_address(), target);
  }

  // required int32 port_number = 3;
  if (has_port_number()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->port_number(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NodeMessage_ListServers_Server::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string username = 1;
    if (has_username()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->username());
    }

    // required string ip_address = 2;
    if (has_ip_address()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ip_address());
    }

    // required int32 port_number = 3;
    if (has_port_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->port_number());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NodeMessage_ListServers_Server::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NodeMessage_ListServers_Server* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NodeMessage_ListServers_Server*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NodeMessage_ListServers_Server::MergeFrom(const NodeMessage_ListServers_Server& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_username()) {
      set_username(from.username());
    }
    if (from.has_ip_address()) {
      set_ip_address(from.ip_address());
    }
    if (from.has_port_number()) {
      set_port_number(from.port_number());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NodeMessage_ListServers_Server::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NodeMessage_ListServers_Server::CopyFrom(const NodeMessage_ListServers_Server& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NodeMessage_ListServers_Server::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void NodeMessage_ListServers_Server::Swap(NodeMessage_ListServers_Server* other) {
  if (other != this) {
    std::swap(username_, other->username_);
    std::swap(ip_address_, other->ip_address_);
    std::swap(port_number_, other->port_number_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NodeMessage_ListServers_Server::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NodeMessage_ListServers_Server_descriptor_;
  metadata.reflection = NodeMessage_ListServers_Server_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int NodeMessage_ListServers::kListServersFieldNumber;
#endif  // !_MSC_VER

NodeMessage_ListServers::NodeMessage_ListServers()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NodeMessage_ListServers::InitAsDefaultInstance() {
}

NodeMessage_ListServers::NodeMessage_ListServers(const NodeMessage_ListServers& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NodeMessage_ListServers::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NodeMessage_ListServers::~NodeMessage_ListServers() {
  SharedDtor();
}

void NodeMessage_ListServers::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NodeMessage_ListServers::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NodeMessage_ListServers::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NodeMessage_ListServers_descriptor_;
}

const NodeMessage_ListServers& NodeMessage_ListServers::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_sp2p_5fprotocol_2eproto();
  return *default_instance_;
}

NodeMessage_ListServers* NodeMessage_ListServers::default_instance_ = NULL;

NodeMessage_ListServers* NodeMessage_ListServers::New() const {
  return new NodeMessage_ListServers;
}

void NodeMessage_ListServers::Clear() {
  list_servers_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NodeMessage_ListServers::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .NodeMessage.ListServers list_servers = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_list_servers:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_list_servers()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_list_servers;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NodeMessage_ListServers::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .NodeMessage.ListServers list_servers = 1;
  for (int i = 0; i < this->list_servers_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->list_servers(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NodeMessage_ListServers::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .NodeMessage.ListServers list_servers = 1;
  for (int i = 0; i < this->list_servers_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->list_servers(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NodeMessage_ListServers::ByteSize() const {
  int total_size = 0;

  // repeated .NodeMessage.ListServers list_servers = 1;
  total_size += 1 * this->list_servers_size();
  for (int i = 0; i < this->list_servers_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->list_servers(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NodeMessage_ListServers::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NodeMessage_ListServers* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NodeMessage_ListServers*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NodeMessage_ListServers::MergeFrom(const NodeMessage_ListServers& from) {
  GOOGLE_CHECK_NE(&from, this);
  list_servers_.MergeFrom(from.list_servers_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NodeMessage_ListServers::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NodeMessage_ListServers::CopyFrom(const NodeMessage_ListServers& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NodeMessage_ListServers::IsInitialized() const {

  return true;
}

void NodeMessage_ListServers::Swap(NodeMessage_ListServers* other) {
  if (other != this) {
    list_servers_.Swap(&other->list_servers_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NodeMessage_ListServers::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NodeMessage_ListServers_descriptor_;
  metadata.reflection = NodeMessage_ListServers_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int NodeMessage_UserInfo::kUserPublicKeyFieldNumber;
#endif  // !_MSC_VER

NodeMessage_UserInfo::NodeMessage_UserInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NodeMessage_UserInfo::InitAsDefaultInstance() {
}

NodeMessage_UserInfo::NodeMessage_UserInfo(const NodeMessage_UserInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NodeMessage_UserInfo::SharedCtor() {
  _cached_size_ = 0;
  user_public_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NodeMessage_UserInfo::~NodeMessage_UserInfo() {
  SharedDtor();
}

void NodeMessage_UserInfo::SharedDtor() {
  if (user_public_key_ != &::google::protobuf::internal::kEmptyString) {
    delete user_public_key_;
  }
  if (this != default_instance_) {
  }
}

void NodeMessage_UserInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NodeMessage_UserInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NodeMessage_UserInfo_descriptor_;
}

const NodeMessage_UserInfo& NodeMessage_UserInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_sp2p_5fprotocol_2eproto();
  return *default_instance_;
}

NodeMessage_UserInfo* NodeMessage_UserInfo::default_instance_ = NULL;

NodeMessage_UserInfo* NodeMessage_UserInfo::New() const {
  return new NodeMessage_UserInfo;
}

void NodeMessage_UserInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_user_public_key()) {
      if (user_public_key_ != &::google::protobuf::internal::kEmptyString) {
        user_public_key_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NodeMessage_UserInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string user_public_key = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_public_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->user_public_key().data(), this->user_public_key().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NodeMessage_UserInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string user_public_key = 1;
  if (has_user_public_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user_public_key().data(), this->user_public_key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->user_public_key(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NodeMessage_UserInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string user_public_key = 1;
  if (has_user_public_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user_public_key().data(), this->user_public_key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->user_public_key(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NodeMessage_UserInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string user_public_key = 1;
    if (has_user_public_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->user_public_key());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NodeMessage_UserInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NodeMessage_UserInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NodeMessage_UserInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NodeMessage_UserInfo::MergeFrom(const NodeMessage_UserInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_public_key()) {
      set_user_public_key(from.user_public_key());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NodeMessage_UserInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NodeMessage_UserInfo::CopyFrom(const NodeMessage_UserInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NodeMessage_UserInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void NodeMessage_UserInfo::Swap(NodeMessage_UserInfo* other) {
  if (other != this) {
    std::swap(user_public_key_, other->user_public_key_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NodeMessage_UserInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NodeMessage_UserInfo_descriptor_;
  metadata.reflection = NodeMessage_UserInfo_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int NodeMessage_UpdateServer::kSecondsToUpdateFieldNumber;
#endif  // !_MSC_VER

NodeMessage_UpdateServer::NodeMessage_UpdateServer()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NodeMessage_UpdateServer::InitAsDefaultInstance() {
}

NodeMessage_UpdateServer::NodeMessage_UpdateServer(const NodeMessage_UpdateServer& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NodeMessage_UpdateServer::SharedCtor() {
  _cached_size_ = 0;
  seconds_to_update_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NodeMessage_UpdateServer::~NodeMessage_UpdateServer() {
  SharedDtor();
}

void NodeMessage_UpdateServer::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NodeMessage_UpdateServer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NodeMessage_UpdateServer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NodeMessage_UpdateServer_descriptor_;
}

const NodeMessage_UpdateServer& NodeMessage_UpdateServer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_sp2p_5fprotocol_2eproto();
  return *default_instance_;
}

NodeMessage_UpdateServer* NodeMessage_UpdateServer::default_instance_ = NULL;

NodeMessage_UpdateServer* NodeMessage_UpdateServer::New() const {
  return new NodeMessage_UpdateServer;
}

void NodeMessage_UpdateServer::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seconds_to_update_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NodeMessage_UpdateServer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 seconds_to_update = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seconds_to_update_)));
          set_has_seconds_to_update();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NodeMessage_UpdateServer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 seconds_to_update = 1;
  if (has_seconds_to_update()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->seconds_to_update(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NodeMessage_UpdateServer::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 seconds_to_update = 1;
  if (has_seconds_to_update()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->seconds_to_update(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NodeMessage_UpdateServer::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 seconds_to_update = 1;
    if (has_seconds_to_update()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seconds_to_update());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NodeMessage_UpdateServer::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NodeMessage_UpdateServer* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NodeMessage_UpdateServer*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NodeMessage_UpdateServer::MergeFrom(const NodeMessage_UpdateServer& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seconds_to_update()) {
      set_seconds_to_update(from.seconds_to_update());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NodeMessage_UpdateServer::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NodeMessage_UpdateServer::CopyFrom(const NodeMessage_UpdateServer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NodeMessage_UpdateServer::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void NodeMessage_UpdateServer::Swap(NodeMessage_UpdateServer* other) {
  if (other != this) {
    std::swap(seconds_to_update_, other->seconds_to_update_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NodeMessage_UpdateServer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NodeMessage_UpdateServer_descriptor_;
  metadata.reflection = NodeMessage_UpdateServer_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int NodeMessage_SignKey::kUserCertificateFieldNumber;
#endif  // !_MSC_VER

NodeMessage_SignKey::NodeMessage_SignKey()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NodeMessage_SignKey::InitAsDefaultInstance() {
}

NodeMessage_SignKey::NodeMessage_SignKey(const NodeMessage_SignKey& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NodeMessage_SignKey::SharedCtor() {
  _cached_size_ = 0;
  user_certificate_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NodeMessage_SignKey::~NodeMessage_SignKey() {
  SharedDtor();
}

void NodeMessage_SignKey::SharedDtor() {
  if (user_certificate_ != &::google::protobuf::internal::kEmptyString) {
    delete user_certificate_;
  }
  if (this != default_instance_) {
  }
}

void NodeMessage_SignKey::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NodeMessage_SignKey::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NodeMessage_SignKey_descriptor_;
}

const NodeMessage_SignKey& NodeMessage_SignKey::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_sp2p_5fprotocol_2eproto();
  return *default_instance_;
}

NodeMessage_SignKey* NodeMessage_SignKey::default_instance_ = NULL;

NodeMessage_SignKey* NodeMessage_SignKey::New() const {
  return new NodeMessage_SignKey;
}

void NodeMessage_SignKey::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_user_certificate()) {
      if (user_certificate_ != &::google::protobuf::internal::kEmptyString) {
        user_certificate_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NodeMessage_SignKey::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string user_certificate = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_certificate()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->user_certificate().data(), this->user_certificate().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NodeMessage_SignKey::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string user_certificate = 1;
  if (has_user_certificate()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user_certificate().data(), this->user_certificate().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->user_certificate(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NodeMessage_SignKey::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string user_certificate = 1;
  if (has_user_certificate()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user_certificate().data(), this->user_certificate().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->user_certificate(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NodeMessage_SignKey::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string user_certificate = 1;
    if (has_user_certificate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->user_certificate());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NodeMessage_SignKey::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NodeMessage_SignKey* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NodeMessage_SignKey*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NodeMessage_SignKey::MergeFrom(const NodeMessage_SignKey& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_certificate()) {
      set_user_certificate(from.user_certificate());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NodeMessage_SignKey::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NodeMessage_SignKey::CopyFrom(const NodeMessage_SignKey& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NodeMessage_SignKey::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void NodeMessage_SignKey::Swap(NodeMessage_SignKey* other) {
  if (other != this) {
    std::swap(user_certificate_, other->user_certificate_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NodeMessage_SignKey::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NodeMessage_SignKey_descriptor_;
  metadata.reflection = NodeMessage_SignKey_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int NodeMessage::kResponseTypeFieldNumber;
const int NodeMessage::kRegisterResponseFieldNumber;
const int NodeMessage::kLoginResponseFieldNumber;
const int NodeMessage::kListNetworksResponseFieldNumber;
const int NodeMessage::kListMyNetworksResponseFieldNumber;
const int NodeMessage::kListServersResponseFieldNumber;
const int NodeMessage::kUserInfoResponseFieldNumber;
const int NodeMessage::kUpdateServerResponseFieldNumber;
const int NodeMessage::kSignKeyResponseFieldNumber;
#endif  // !_MSC_VER

NodeMessage::NodeMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NodeMessage::InitAsDefaultInstance() {
  register_response_ = const_cast< ::NodeMessage_Register*>(&::NodeMessage_Register::default_instance());
  login_response_ = const_cast< ::NodeMessage_Login*>(&::NodeMessage_Login::default_instance());
  list_networks_response_ = const_cast< ::NodeMessage_ListNetworks*>(&::NodeMessage_ListNetworks::default_instance());
  list_my_networks_response_ = const_cast< ::NodeMessage_ListMyNetworks*>(&::NodeMessage_ListMyNetworks::default_instance());
  list_servers_response_ = const_cast< ::NodeMessage_ListServers*>(&::NodeMessage_ListServers::default_instance());
  user_info_response_ = const_cast< ::NodeMessage_UserInfo*>(&::NodeMessage_UserInfo::default_instance());
  update_server_response_ = const_cast< ::NodeMessage_UpdateServer*>(&::NodeMessage_UpdateServer::default_instance());
  sign_key_response_ = const_cast< ::NodeMessage_SignKey*>(&::NodeMessage_SignKey::default_instance());
}

NodeMessage::NodeMessage(const NodeMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NodeMessage::SharedCtor() {
  _cached_size_ = 0;
  response_type_ = 200;
  register_response_ = NULL;
  login_response_ = NULL;
  list_networks_response_ = NULL;
  list_my_networks_response_ = NULL;
  list_servers_response_ = NULL;
  user_info_response_ = NULL;
  update_server_response_ = NULL;
  sign_key_response_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NodeMessage::~NodeMessage() {
  SharedDtor();
}

void NodeMessage::SharedDtor() {
  if (this != default_instance_) {
    delete register_response_;
    delete login_response_;
    delete list_networks_response_;
    delete list_my_networks_response_;
    delete list_servers_response_;
    delete user_info_response_;
    delete update_server_response_;
    delete sign_key_response_;
  }
}

void NodeMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NodeMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NodeMessage_descriptor_;
}

const NodeMessage& NodeMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_sp2p_5fprotocol_2eproto();
  return *default_instance_;
}

NodeMessage* NodeMessage::default_instance_ = NULL;

NodeMessage* NodeMessage::New() const {
  return new NodeMessage;
}

void NodeMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    response_type_ = 200;
    if (has_register_response()) {
      if (register_response_ != NULL) register_response_->::NodeMessage_Register::Clear();
    }
    if (has_login_response()) {
      if (login_response_ != NULL) login_response_->::NodeMessage_Login::Clear();
    }
    if (has_list_networks_response()) {
      if (list_networks_response_ != NULL) list_networks_response_->::NodeMessage_ListNetworks::Clear();
    }
    if (has_list_my_networks_response()) {
      if (list_my_networks_response_ != NULL) list_my_networks_response_->::NodeMessage_ListMyNetworks::Clear();
    }
    if (has_list_servers_response()) {
      if (list_servers_response_ != NULL) list_servers_response_->::NodeMessage_ListServers::Clear();
    }
    if (has_user_info_response()) {
      if (user_info_response_ != NULL) user_info_response_->::NodeMessage_UserInfo::Clear();
    }
    if (has_update_server_response()) {
      if (update_server_response_ != NULL) update_server_response_->::NodeMessage_UpdateServer::Clear();
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_sign_key_response()) {
      if (sign_key_response_ != NULL) sign_key_response_->::NodeMessage_SignKey::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NodeMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .NodeMessage.ResponseType response_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::NodeMessage_ResponseType_IsValid(value)) {
            set_response_type(static_cast< ::NodeMessage_ResponseType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_register_response;
        break;
      }

      // optional .NodeMessage.Register register_response = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_register_response:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_register_response()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_login_response;
        break;
      }

      // optional .NodeMessage.Login login_response = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_login_response:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_login_response()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_list_networks_response;
        break;
      }

      // optional .NodeMessage.ListNetworks list_networks_response = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_list_networks_response:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_list_networks_response()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_list_my_networks_response;
        break;
      }

      // optional .NodeMessage.ListMyNetworks list_my_networks_response = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_list_my_networks_response:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_list_my_networks_response()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_list_servers_response;
        break;
      }

      // optional .NodeMessage.ListServers list_servers_response = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_list_servers_response:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_list_servers_response()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_user_info_response;
        break;
      }

      // optional .NodeMessage.UserInfo user_info_response = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user_info_response:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_user_info_response()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_update_server_response;
        break;
      }

      // optional .NodeMessage.UpdateServer update_server_response = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_update_server_response:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_update_server_response()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(130)) goto parse_sign_key_response;
        break;
      }

      // optional .NodeMessage.SignKey sign_key_response = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sign_key_response:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sign_key_response()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NodeMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .NodeMessage.ResponseType response_type = 1;
  if (has_response_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->response_type(), output);
  }

  // optional .NodeMessage.Register register_response = 2;
  if (has_register_response()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->register_response(), output);
  }

  // optional .NodeMessage.Login login_response = 3;
  if (has_login_response()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->login_response(), output);
  }

  // optional .NodeMessage.ListNetworks list_networks_response = 5;
  if (has_list_networks_response()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->list_networks_response(), output);
  }

  // optional .NodeMessage.ListMyNetworks list_my_networks_response = 6;
  if (has_list_my_networks_response()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->list_my_networks_response(), output);
  }

  // optional .NodeMessage.ListServers list_servers_response = 7;
  if (has_list_servers_response()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->list_servers_response(), output);
  }

  // optional .NodeMessage.UserInfo user_info_response = 13;
  if (has_user_info_response()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->user_info_response(), output);
  }

  // optional .NodeMessage.UpdateServer update_server_response = 14;
  if (has_update_server_response()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->update_server_response(), output);
  }

  // optional .NodeMessage.SignKey sign_key_response = 16;
  if (has_sign_key_response()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, this->sign_key_response(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NodeMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .NodeMessage.ResponseType response_type = 1;
  if (has_response_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->response_type(), target);
  }

  // optional .NodeMessage.Register register_response = 2;
  if (has_register_response()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->register_response(), target);
  }

  // optional .NodeMessage.Login login_response = 3;
  if (has_login_response()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->login_response(), target);
  }

  // optional .NodeMessage.ListNetworks list_networks_response = 5;
  if (has_list_networks_response()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->list_networks_response(), target);
  }

  // optional .NodeMessage.ListMyNetworks list_my_networks_response = 6;
  if (has_list_my_networks_response()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->list_my_networks_response(), target);
  }

  // optional .NodeMessage.ListServers list_servers_response = 7;
  if (has_list_servers_response()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->list_servers_response(), target);
  }

  // optional .NodeMessage.UserInfo user_info_response = 13;
  if (has_user_info_response()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->user_info_response(), target);
  }

  // optional .NodeMessage.UpdateServer update_server_response = 14;
  if (has_update_server_response()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        14, this->update_server_response(), target);
  }

  // optional .NodeMessage.SignKey sign_key_response = 16;
  if (has_sign_key_response()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        16, this->sign_key_response(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NodeMessage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .NodeMessage.ResponseType response_type = 1;
    if (has_response_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->response_type());
    }

    // optional .NodeMessage.Register register_response = 2;
    if (has_register_response()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->register_response());
    }

    // optional .NodeMessage.Login login_response = 3;
    if (has_login_response()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->login_response());
    }

    // optional .NodeMessage.ListNetworks list_networks_response = 5;
    if (has_list_networks_response()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->list_networks_response());
    }

    // optional .NodeMessage.ListMyNetworks list_my_networks_response = 6;
    if (has_list_my_networks_response()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->list_my_networks_response());
    }

    // optional .NodeMessage.ListServers list_servers_response = 7;
    if (has_list_servers_response()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->list_servers_response());
    }

    // optional .NodeMessage.UserInfo user_info_response = 13;
    if (has_user_info_response()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->user_info_response());
    }

    // optional .NodeMessage.UpdateServer update_server_response = 14;
    if (has_update_server_response()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->update_server_response());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .NodeMessage.SignKey sign_key_response = 16;
    if (has_sign_key_response()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->sign_key_response());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NodeMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NodeMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NodeMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NodeMessage::MergeFrom(const NodeMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_response_type()) {
      set_response_type(from.response_type());
    }
    if (from.has_register_response()) {
      mutable_register_response()->::NodeMessage_Register::MergeFrom(from.register_response());
    }
    if (from.has_login_response()) {
      mutable_login_response()->::NodeMessage_Login::MergeFrom(from.login_response());
    }
    if (from.has_list_networks_response()) {
      mutable_list_networks_response()->::NodeMessage_ListNetworks::MergeFrom(from.list_networks_response());
    }
    if (from.has_list_my_networks_response()) {
      mutable_list_my_networks_response()->::NodeMessage_ListMyNetworks::MergeFrom(from.list_my_networks_response());
    }
    if (from.has_list_servers_response()) {
      mutable_list_servers_response()->::NodeMessage_ListServers::MergeFrom(from.list_servers_response());
    }
    if (from.has_user_info_response()) {
      mutable_user_info_response()->::NodeMessage_UserInfo::MergeFrom(from.user_info_response());
    }
    if (from.has_update_server_response()) {
      mutable_update_server_response()->::NodeMessage_UpdateServer::MergeFrom(from.update_server_response());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_sign_key_response()) {
      mutable_sign_key_response()->::NodeMessage_SignKey::MergeFrom(from.sign_key_response());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NodeMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NodeMessage::CopyFrom(const NodeMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NodeMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_register_response()) {
    if (!this->register_response().IsInitialized()) return false;
  }
  if (has_login_response()) {
    if (!this->login_response().IsInitialized()) return false;
  }
  if (has_list_networks_response()) {
    if (!this->list_networks_response().IsInitialized()) return false;
  }
  if (has_list_my_networks_response()) {
    if (!this->list_my_networks_response().IsInitialized()) return false;
  }
  if (has_user_info_response()) {
    if (!this->user_info_response().IsInitialized()) return false;
  }
  if (has_update_server_response()) {
    if (!this->update_server_response().IsInitialized()) return false;
  }
  if (has_sign_key_response()) {
    if (!this->sign_key_response().IsInitialized()) return false;
  }
  return true;
}

void NodeMessage::Swap(NodeMessage* other) {
  if (other != this) {
    std::swap(response_type_, other->response_type_);
    std::swap(register_response_, other->register_response_);
    std::swap(login_response_, other->login_response_);
    std::swap(list_networks_response_, other->list_networks_response_);
    std::swap(list_my_networks_response_, other->list_my_networks_response_);
    std::swap(list_servers_response_, other->list_servers_response_);
    std::swap(user_info_response_, other->user_info_response_);
    std::swap(update_server_response_, other->update_server_response_);
    std::swap(sign_key_response_, other->sign_key_response_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NodeMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NodeMessage_descriptor_;
  metadata.reflection = NodeMessage_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
